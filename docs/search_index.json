[["index.html", "环境数据分析与可视化 前言", " 环境数据分析与可视化 谭巧国 2022-06-07 前言 本网站内容用于厦门大学环境与生态学院研究生课程“环境数据分析与可视化”的教学。内容在持续更新中。 "],["01-intro.html", "Chapter 1 R的基础知识 1.1 科学计算器 1.2 变量赋值 1.3 变量取名规则 1.4 变量类型 1.5 常用的数据类型 1.6 数据类型强制转化（coercing） 1.7 缺失值（NA）和无穷大（Inf） 1.8 向量（vector） 1.9 矩阵（matrix） 1.10 数据表（data frame） 1.11 读入数据 1.12 输出数据 1.13 Base R简单作图 1.14 ggplot作图 1.15 保存图片 1.16 保存图片", " Chapter 1 R的基础知识 1.1 科学计算器 四则运算： (1 + 2 * 4)/3 - 1.3 # [1] 1.7 指数运算： 例如，100的0.5次方： 100^0.5 # [1] 10 对数运算： log(2) # [1] 0.6931472 注意这是自然对数，与excel里的表述不一样。若以10为底，需明确标注： log10(2) # [1] 0.30103 类似地，以2为底的对数是： log2(2) ## [1] 1 特殊的常数： e是自然对数的底，e=2.718…, exp(1) = e^1；用于指数函数 exp(1) ## [1] 2.718282 pi = 3.14159…圆周率 sin(pi/2) ## [1] 1 科学计数法，6.22*10^23，注意这里e不是自然对数的底 6.22e23 ## [1] 6.22e+23 绝对值 abs(-10) ## [1] 10 1.1.1 取整 round()函数取整原则：四舍六入五成双 round(2.3) ## [1] 2 round(2.6) ## [1] 3 round(2.5) ## [1] 2 round(3.5) ## [1] 4 floor(2.6) #向下取整 ## [1] 2 ceiling(2.3) #向上取整 ## [1] 3 trunc(2.3)#取整数部分 ## [1] 2 trunc(2.6) ## [1] 2 1.1.2 保留有效数字 原则：四舍六入五成双 round(pi, 2) #保留2位小数 ## [1] 3.14 round(pi, 3) #保留3位小数 ## [1] 3.142 signif(pi,2) #保留2位有效数字 ## [1] 3.1 signif(pi,3) #保留3位有效数字 ## [1] 3.14 1.1.3 常用运算符 符号 含义 + 加 - 减 * 乘 / 除 ^ 乘方 %/% 商 %% 余数 &gt; 大于 &gt;= 大于等于 = 等于 &lt; 小于 &lt;= 小于等于 == 等于 != 不等于 ! 非 &amp; 与 | 或 ~ 前者是后者的函数 &lt;- 向左赋值 (可读作“得到”) -&gt; 向右赋值 (可读作“得到”) $ 列表索引 : 创建序列 1.1.4 逻辑运算 5 &gt; 3 ## [1] TRUE 5 == 3 ## [1] FALSE 1:5 != 3 ## [1] TRUE TRUE FALSE TRUE TRUE 1:5 &gt; 2 &amp; 1:5 &lt;5 ## [1] FALSE FALSE TRUE TRUE FALSE 1:5 &lt;= 2 | 1:5 &gt;=4 ## [1] TRUE TRUE FALSE TRUE TRUE 注：1：5的是指包含“1，2，3，4，5”这5个自然数的向量 1.2 变量赋值 在R语言里，用符号”&lt;-”给变量赋值。它的功能和”=”几乎等同。但是用&lt;-是一种传统，我们最好遵守。 x1 = 12 x1 ## [1] 12 x2 &lt;- 23 x2 ## [1] 23 y &lt;- x1 + x2 y ## [1] 35 x1 + x2 -&gt; z z ## [1] 35 1.3 变量取名规则 变量名只能是字母、数字、点（.）、下划线（_）的组合 只能以字母或点开头；不能以数字、下划线开头 对字母大小写敏感，a和A是不同的变量 变量名不能含有空格：x_1, x.1都可以，但x 1不可以；推荐x_1形式的命名，理由是方便阅读，方便记忆 1.4 变量类型 变量 含义 integer 整数 numeric 实数 character 字符 logical 逻辑值(TRUE或FALSE) class(as.integer(1.2)) #将1.2转化为整数,并查看其类型 ## [1] &quot;integer&quot; class(pi) # pi = 3.1415...... ## [1] &quot;numeric&quot; class(&quot;Xiamen&quot;) ## [1] &quot;character&quot; class(c(TRUE,FALSE)) ## [1] &quot;logical&quot; 1.5 常用的数据类型 数据类型 说明 vector 向量，元素可以是数值、字符串、逻辑值 factor 因子，水平，是离散的，以整数vector形式储存，映射到字符串上 matrix 矩阵，所有元素的类型(numeric, character等)需一致 data frame 数据表，和matrix类似，但每列的类型可以不一致 list 清单，与vector类似，但每个元素的类型可以不一致，且可以是任何数据类型（例如numeric,data frame, list…) 1.6 数据类型强制转化（coercing） t_1 &lt;- c(&quot;1&quot;, &quot;2&quot;, &quot;3.4&quot;) #字符，无法进行计算 t_1 ## [1] &quot;1&quot; &quot;2&quot; &quot;3.4&quot; class(t_1) ## [1] &quot;character&quot; t_2 &lt;- as.numeric(t_1) #转化为数值，就可以计算了 t_2 ## [1] 1.0 2.0 3.4 class(t_2) ## [1] &quot;numeric&quot; t_3 &lt;- as.factor(t_2) #数值转化为因子，非常有用的功能，以后详述 t_3 ## [1] 1 2 3.4 ## Levels: 1 2 3.4 class(t_3) ## [1] &quot;factor&quot; 1.7 缺失值（NA）和无穷大（Inf） 实验数据经常会有缺失值，缺失值的处理对于数据分析非常重要。 v0 &lt;- c(1, 3, 4, NA) #第4个数缺失 v0 ## [1] 1 3 4 NA is.na(v0) #判断是否有缺失值 ## [1] FALSE FALSE FALSE TRUE v0[is.na(v0)] &lt;- 0 #将缺失值替换为0 v0 ## [1] 1 3 4 0 logv0 &lt;- log(v0) #对数据进行自然对数转化，产生了负无穷大值（-Inf） logv0 ## [1] 0.000000 1.098612 1.386294 -Inf is.infinite(logv0) # 检查是否有无穷大，包括Inf和-Inf ## [1] FALSE FALSE FALSE TRUE logv0[is.infinite(logv0)] &lt;- NA #将无穷大替换为缺失值NA logv0 ## [1] 0.000000 1.098612 1.386294 NA 1.8 向量（vector） 1.8.1 用函数c( )生成向量 “c”的含义: 1. combine 2. concatenate [kɒn’kætɪneɪt] vt.把 （一系列事件、事情等）联系起来 数值向量 v1 &lt;- c(1.4, 3, 10.9, -7) v1 ## [1] 1.4 3.0 10.9 -7.0 字符向量 v2 &lt;- c(&quot;apple&quot;,&quot;organge&quot;,&quot;banana&quot;) v2 ## [1] &quot;apple&quot; &quot;organge&quot; &quot;banana&quot; 逻辑值向量 v3 &lt;- c(TRUE,FALSE,TRUE,FALSE) v3 ## [1] TRUE FALSE TRUE FALSE 1.8.2 用 seq()生成等差序列 seq(from = 10, to = 100, by = 10) ## [1] 10 20 30 40 50 60 70 80 90 100 from是第一个值，to是最后一个值，by是相邻两个数的间隔值。 可以简略成(默认第1个数赋给from，第2个数赋给to，第3个数赋给by) : seq(10, 100, 10) ## [1] 10 20 30 40 50 60 70 80 90 100 怎么使用seq()函数？–查看帮助信息。 执行代码?seq， 你会在Help栏看到如下信息: Usage seq(…) Default S3 method: seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)), length.out = NULL, along.with = NULL, …) 耐心读一读，你可以看懂。读懂之后，你还可以这么使用seq()： seq(10, 100, length.out = 19) ## [1] 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 length.out是数列的长度 v2 &lt;- seq(10, 100, length.out = 19) v2[12] ## [1] 65 1.8.3 用:符号生成连续自然数序列 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 v3 &lt;- 20:30 v3 ## [1] 20 21 22 23 24 25 26 27 28 29 30 1.8.4 用rep()重复元素，生成向量 rep(8, 5) ## [1] 8 8 8 8 8 rep(&quot;ha&quot;, 6) ## [1] &quot;ha&quot; &quot;ha&quot; &quot;ha&quot; &quot;ha&quot; &quot;ha&quot; &quot;ha&quot; rep(1:3, 2) ## [1] 1 2 3 1 2 3 rep(1:3, each = 3) ## [1] 1 1 1 2 2 2 3 3 3 rep(1:3, each = 3, times=2) ## [1] 1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3 这个功能在自动填充数据表s时非常有用，例如，填充treatment，replicate编号。 1.8.5 向量信息提取与运算 v1 &lt;- c(1.4, 3, 10.9, -7) v1[3] # 引用第3个元素 ## [1] 10.9 v1 + 10 # 每个元素均加10 ## [1] 11.4 13.0 20.9 3.0 v1 * 10 # 每个元素均乘以10 ## [1] 14 30 109 -70 v1^2 #每个元素均求平方 ## [1] 1.96 9.00 118.81 49.00 1.8.6 针对向量的统计运算 v4 &lt;- seq(60, 100, 5) v4 ## [1] 60 65 70 75 80 85 90 95 100 summary(v4) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 60 70 80 80 90 100 mean(v4) #算术平均值 ## [1] 80 median(v4) #中位数 ## [1] 80 sd(v4) # 标准差 ## [1] 13.69306 min(v4) # 最小值 ## [1] 60 max(v4) # 最大值 ## [1] 100 range(v4) #范围：最小值～最大值 ## [1] 60 100 1.9 矩阵（matrix） 1.9.1 用matrix()函数生成一个矩阵 m1 &lt;- matrix(1:18, nrow=3, ncol=6) m1 ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 1 4 7 10 13 16 ## [2,] 2 5 8 11 14 17 ## [3,] 3 6 9 12 15 18 默认按列排元素，可用byrow更改为按行排 m2 &lt;- matrix(1:18, nrow=3, ncol=6, byrow=T) m2 ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 1 2 3 4 5 6 ## [2,] 7 8 9 10 11 12 ## [3,] 13 14 15 16 17 18 1.10 数据表（data frame） 1.10.1 用data.frame()函数生成一个数据表 数据表储存以下信息：学生姓名、性别、考试分数 student &lt;- c(&quot;Tom&quot;, &quot;Jack&quot;, &quot;Mingming&quot;, &quot;Alice&quot;, &quot;Feifei&quot;) sex &lt;- c(&quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Female&quot;) score &lt;- c(83, 72, 80, 92, 95) data.frame(student, sex, score) ## student sex score ## 1 Tom Male 83 ## 2 Jack Male 72 ## 3 Mingming Male 80 ## 4 Alice Female 92 ## 5 Feifei Female 95 可将该数据表储存于变量d1中，也可以说给数据表取个名字叫d1 d1 &lt;- data.frame(student, sex, score) 1.10.2 引用data.frame中的信息 引用d1数据表的student列有两种方法，一种是用名称，一种是用编号： d1$student ## [1] &quot;Tom&quot; &quot;Jack&quot; &quot;Mingming&quot; &quot;Alice&quot; &quot;Feifei&quot; d1[ , 1] #逗号前是行号，逗号后是列号 ## [1] &quot;Tom&quot; &quot;Jack&quot; &quot;Mingming&quot; &quot;Alice&quot; &quot;Feifei&quot; 引用d1数据表第2个学生的成绩有两种方法，一种是用名称，一种是用编号: d1$score[2] ## [1] 72 d1[2, 3] ## [1] 72 1.10.3 查看base R自带的数据 data() #用此函数查看R自带的数据，以下是节选。 可以用这些数据来测试、交流你的统计、绘图代码。 数据名称 简介 BOD Biochemical Oxygen Demand ChickWeight Weight versus age of chicks on different ToothGrowth The Effect of Vitamin C on Tooth Growth in Guinea Pigs co2 Mauna Loa Atmospheric CO2 Concentration iris Edgar Anderson’s Iris Data mtcars Motor Trend Car Road Tests npk Classical N, P, K Factorial Experiment precip Annual Precipitation in US Cities pressure Vapor Pressure of Mercury as a Function of Temperature rivers Lengths of Major North American Rivers 1.10.4 查看数据表的常用命令 查看数据iris表头（默认前6行，可更改） head(iris ) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa – 查看表尾（默认最后6行，可更改，此处改为4行） tail(iris, 4) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica 查看数据表有哪些变量 names(iris) ## [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; 以上结果显示5个变量的名称，每1列是1个变量。 查看数据表的尺寸（dimension），即行数和列数 dim(iris) ## [1] 150 5 结果显示150行，5列。 length()显示数据表的列数，即变量数；显示vector的长度，即元素数。 length(iris) #5列 ## [1] 5 length(iris$Species) #150行 ## [1] 150 1.10.5 查看数据表的其他性质 查看数据表的结构 str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... 前4列均为numeric，最后一列为factor 查看数据表的概要 summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## 包含了每列的最小值、25%分位数、中位值、均值、75%分位数、最大值 查看iris这个对象（object）的类型 class(iris) ## [1] &quot;data.frame&quot; 当然是data.frame类型。 1.10.6 合并数据表 d1 ## student sex score ## 1 Tom Male 83 ## 2 Jack Male 72 ## 3 Mingming Male 80 ## 4 Alice Female 92 ## 5 Feifei Female 95 d2 &lt;- data.frame(age = c(20, 19, 20, 21, 19)) d2 ## age ## 1 20 ## 2 19 ## 3 20 ## 4 21 ## 5 19 合并列（column binding） cbind(d1, d2) ## student sex score age ## 1 Tom Male 83 20 ## 2 Jack Male 72 19 ## 3 Mingming Male 80 20 ## 4 Alice Female 92 21 ## 5 Feifei Female 95 19 合并行（row binding） rbind(d1, d1) ## student sex score ## 1 Tom Male 83 ## 2 Jack Male 72 ## 3 Mingming Male 80 ## 4 Alice Female 92 ## 5 Feifei Female 95 ## 6 Tom Male 83 ## 7 Jack Male 72 ## 8 Mingming Male 80 ## 9 Alice Female 92 ## 10 Feifei Female 95 1.11 读入数据 四种方法： 代码 说明 d1 &lt;- read.table(\"clipboard\", head = T) 从剪贴板（ctrl+C）直接读取，适合于小数据表的快速操作 d2 &lt;- read.csv(file.choose()) 弹出对话框，点击鼠标选取文件，读取csv格式的数据 d3 &lt;- read.csv(\"你的文件名.csv\") 从工作目录下直接读取csv格式的数据 d4 &lt;- read_excel(\"你的文件名.xlsx\", sheet = 1) 直接读取xlsx文件中某个sheet（此处为sheet1）中的数据，需先加载readxl程序包 1.12 输出数据 co2是R自带的时间序列数据，此处将其转化为data.frame，用write.csv()函数将数据储存于名为“CO2_data.csv”的文件中。你可在工作文件夹下找到该文件。 d_CO2 &lt;- data.frame(time = time(co2), CO2 = co2) write.csv(d_CO2, &quot;CO2_data.csv&quot;) 1.13 Base R简单作图 1.13.1 默认的plot()函数 绘制散点图，可用于快速了解数据。 plot(x = d_CO2$time, y = d_CO2$CO2) 1.13.2 修改为折线图 plot(x = d_CO2$time, y = d_CO2$CO2, type = &quot;l&quot;) 1.13.3 修改颜色设置 plot(x = d_CO2$time, y = d_CO2$CO2, type = &quot;l&quot;, col = &quot;red&quot;) 1.13.4 修改坐标轴名称 plot(x = d_CO2$time, y = d_CO2$CO2, type = &quot;l&quot;, col = &quot;red&quot;, xlab = &quot;Year&quot;, ylab = expression(pCO[2]~&quot;(ppm)&quot;)) 1.14 ggplot作图 先对ggplot绘图有个简单印象，下次课我们深入学习。 library(ggplot2) #ggplot绘图 ggplot(d_CO2, aes(time, CO2))+ theme_bw()+ geom_line(color = &quot;red2&quot;)+ labs(x = &quot;Year&quot;, y = ~pCO[2]~(ppm)) ## Don&#39;t know how to automatically pick scale for object of type ts. Defaulting to continuous. ## Don&#39;t know how to automatically pick scale for object of type ts. Defaulting to continuous. #ggsave(&quot;pCO2.png&quot;, width=342/90, height=243/90, dpi=600) 1.15 保存图片 1.15.1 第一种方法 首先将图片赋值给变量p1。 library(ggplot2) p1 &lt;- ggplot(mpg, aes(displ, hwy))+ geom_point() 然后调用png()作图设备作图，并记得随手用dev.off()关闭作图设备（否则不出图）。变量p1夹在以上两行代码之间。完成操作后，你就能在工作文件夹里找到名称为“myplot_1.png”的图了。 png(&quot;myplot_1.png&quot;, width=359/90*600, height=239/90*600, res=600) p1 dev.off() 1.16 保存图片 1.16.1 第二种方法 由于我们以后大多使用ggplot()作图，因此可以用ggplot2程序包中的ggsave()函数保存当前显示的图片（在RStudio右下面板中）。 library(ggplot2) ggplot(mpg, aes(displ, hwy))+ geom_point() ggsave(&quot;myplot_2.png&quot;, width=359/90, height=239/90, dpi=600) #png格式，位图 ggsave(&quot;myplot_2.pdf&quot;, width=359/90, height=239/90) #pdf格式，矢量图 完成以上操作，你就能在工作文件夹里找到名称为“myplot_2.png”“myplot_2.pdf”的图了。 如何设置合适的width和height? 需要一些技巧（我会操作演示）和审美能力。 1.16.2 推荐阅读 Crawley MJ. The R Book. 2nd ed. Chapter 2. Essentials of the R Language.pp 12-136. (有点枯燥，至少读1/3，读不完的之后的学习过程中还可以再回过头读。) "],["03-dplyr.html", "Chapter 2 ggplot2作图入门 2.1 以R自带的数据ToothGrowth为例 2.2 开始作图 2.3 用颜色”color=”区分不同处理 2.4 用形状”shape=”进一步区分不同处理 2.5 用”stat_summary()”添加平均值 2.6 用”stat_summary()”添加平均值 2.7 用”stat_summary()”添加误差棒 2.8 用”stat_summary()”添加误差棒 2.9 甚至是这样的 2.10 这样才是好的格式，这叫Tidy Data 2.11 Tidy Data 整齐数据 2.12 当然，用“均值+标准差”格式的数据也可以作图 2.13 当然，用“均值+标注差”格式的数据也可以作图 2.14 用geom_col()画柱状图 2.15 修改细节，使之规范 2.16 直接用Tidy Data（ToothGrowth）作柱状图 2.17 用geom_boxplot()画箱式图 2.18 用factor()将数值变量转化为因子 2.19 要点小结 2.20 阅读作业 2.21 进阶：拟合及结果可视化 2.22 先用head()和str()来查看数据 2.23 散点图是我们对数据进行探索分析的法宝 2.24 均值+标准差（换一种方法） 2.25 对比两种等价的作图方法 2.26 nls()非线性拟合米氏方程：手动提取拟合结果 2.27 nls()非线性拟合米氏方程：自动提取拟合结果-1 2.28 nls()非线性拟合米氏方程：自动提取拟合结果-2 2.29 生成画拟合线所需的数据 2.30 添加拟合线 2.31 修饰细节 2.32 如何在图上添加数学公式？ 2.33 另一个探索数据的超级武器：分面facet 2.34 运用for()循环语句，批量拟合11组数据 2.35 生成画11条拟合线的数据 2.36 画11条拟合线 2.37 修改细节 2.38 目前的数据存在哪些问题： 2.39 整理数据：用select()筛选数据的特定列 2.40 数据整理： 用filter()筛选数据的特定行 2.41 注意区分filter()和select() 2.42 用group_by和summarise分组计算均值、标准差 2.43 研究问题2： 2.44 要点小结 2.45 要点小结 2.46 练习 2.47 阅读：", " Chapter 2 ggplot2作图入门 2.0.1 ggplot基本理念 图层、映射 展开画布，一张空图 library(ggplot2) ggplot() 数据有了，但还不知道要画什么图，仍然是一张空图 ggplot(mpg) 知道了谁是x ggplot(mpg)+ aes(x = displ) 知道了谁是y ggplot(mpg)+ aes(x = displ)+ aes(y = hwy) 知道了要画什么图，图就有了 ggplot(mpg)+ aes(x = displ)+ aes(y = hwy) + geom_point() 把aes()收进ggplot()，代码显得紧凑 ggplot(mpg, aes(x = displ, y = hwy))+ geom_point() 颜色映射到变量class， ggplot(mpg, aes(x = displ, y = hwy, color = class))+ geom_point() 颜色映射放在ggplot里，会管住所有图层 ggplot(mpg, aes(x = displ, y = hwy, color = class))+ geom_point()+ geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 颜色映射放在geom_point()里，只能管住geom_point()图层，对其他图层不起作用 ggplot(mpg, aes(x = displ, y = hwy))+ geom_point(aes(color = class)) ggplot(mpg, aes(x = displ, y = hwy))+ geom_point(aes(color = class))+ geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 2.1 以R自带的数据ToothGrowth为例 先用敲入代码?ToothGrowth来了解一下数据。 &gt;The Effect of Vitamin C on Tooth Growth in Guinea Pigs (豚鼠) &gt; Description &gt; The response is the length of odontoblasts (cells responsible for tooth growth) in 60 guinea pigs. Each animal received one of three dose levels of vitamin C (0.5, 1, and 2 mg/day) by one of two delivery methods, orange juice or ascorbic acid (a form of vitamin C and coded as VC). Format A data frame with 60 observations on 3 variables. [,1] len numeric Tooth length .red[第1列是数值变量，牙齿长度] [,2] supp factor Supplement type (VC or OJ) .red[第2列是因子，补充剂类型，维C还是橙汁] [,3] dose numeric Dose in milligrams/day .red[第3列是数值变量，补充剂的剂量] References Crampton, E. W. (1947). The growth of the odontoblast of the incisor teeth as a criterion of vitamin C intake of the guinea pig. The Journal of Nutrition, 33(5), 491–504. doi: 10.1093/jn/33.5.491. ##了解一下ToothGrowth的内容 先用head()来看看数据长什么样： head(ToothGrowth) ## len supp dose ## 1 4.2 VC 0.5 ## 2 11.5 VC 0.5 ## 3 7.3 VC 0.5 ## 4 5.8 VC 0.5 ## 5 6.4 VC 0.5 ## 6 10.0 VC 0.5 再用str()具体了解一下数据概况： str(ToothGrowth) ## &#39;data.frame&#39;: 60 obs. of 3 variables: ## $ len : num 4.2 11.5 7.3 5.8 6.4 10 11.2 11.2 5.2 7 ... ## $ supp: Factor w/ 2 levels &quot;OJ&quot;,&quot;VC&quot;: 2 2 2 2 2 2 2 2 2 2 ... ## $ dose: num 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ... 2.2 开始作图 使用ggplot()作图，需先加载ggplot2程序包 可以略去“x=”，“y=”，使代码更简洁；第1个数默认给x，第2个默认给y library(ggplot2) #加载ggplot2包 ggplot(ToothGrowth, aes(x=dose, y=len))+ geom_point() #简洁代码： ggplot(ToothGrowth, aes(dose, len))+ geom_point() 2.3 用颜色”color=”区分不同处理 将颜色（color）映射（mapping）到补充剂类别（supp）上，即用不同颜色区分“VC”和“橙汁”数据 ggplot(ToothGrowth, aes(x=dose, y=len, color=supp))+ geom_point() 2.4 用形状”shape=”进一步区分不同处理 将点的形状映射到补充剂类别上，即用不同形状区分“VC”和“橙汁”数据 黑白打印、色盲友好 ggplot(ToothGrowth, aes(x=dose, y=len, color=supp,shape=supp))+ geom_point() 2.5 用”stat_summary()”添加平均值 我们喜欢看平均值 ggplot(ToothGrowth, aes(x=dose, y=len, color=supp, shape=supp))+ geom_point()+ stat_summary(geom=&quot;line&quot;, fun=&quot;mean&quot;) ] 2.6 用”stat_summary()”添加平均值 去掉散点，加上平均值对应的点 ggplot(ToothGrowth, aes(x=dose, y=len, color=supp, shape=supp))+ #geom_point()+ #加上井号的作用：使这行代码变为注释，不运行 stat_summary(geom=&quot;line&quot;, fun=&quot;mean&quot;)+ stat_summary(geom=&quot;point&quot;, fun=&quot;mean&quot;) 2.7 用”stat_summary()”添加误差棒 计算标准差的函数是sd()；误差棒：errorbar ggplot(ToothGrowth, aes(x=dose, y=len, color=supp, shape=supp))+ stat_summary(geom=&quot;line&quot;, fun=&quot;mean&quot;)+ stat_summary(geom=&quot;point&quot;, fun=&quot;mean&quot;)+ stat_summary(geom=&quot;errorbar&quot;, fun.min=function(x) mean(x)-sd(x), fun.max=function(x) mean(x)+sd(x)) #自定义函数计算标准差；还有很多其他方法，目前这个方法最容易理解 2.8 用”stat_summary()”添加误差棒 美化一下误差棒 ggplot(ToothGrowth, aes(x=dose, y=len, color=supp, shape=supp))+ stat_summary(geom=&quot;line&quot;, fun=&quot;mean&quot;)+ stat_summary(geom=&quot;point&quot;, fun=&quot;mean&quot;)+ stat_summary(geom=&quot;errorbar&quot;, fun.min=function(x) mean(x)-sd(x), fun.max=function(x) mean(x)+sd(x), width=0.1) #把误差棒变窄，试试改为0 我的数据不是这种格式啊! supp dose mean sd OJ 0.5 13.23 4.46 OJ 1.0 22.70 3.91 OJ 2.0 26.06 2.66 VC 0.5 7.98 2.75 VC 1.0 16.77 2.52 VC 2.0 26.14 4.80 2.9 甚至是这样的 supp…1 dose…2 mean…3 sd…4 supp…5 dose…6 mean…7 sd…8 OJ 0.5 13.23 4.46 VC 0.5 7.98 2.75 OJ 1.0 22.70 3.91 VC 1.0 16.77 2.52 OJ 2.0 26.06 2.66 VC 2.0 26.14 4.80 ## 这样的数据不方便统计分析，以后别这样了 左边的长表格格式整齐，R可以直接处理，但缺点是丢失了原始信息 右边的宽表格R不能直接处理（可以转化，之后课程会讲） 2.10 这样才是好的格式，这叫Tidy Data 2.11 Tidy Data 整齐数据 Tidy data is data where: Each variable is in a column. .red[每1列对应1个变量] Each observation is a row. .red[每1行对应1个样本、1次观察] Each value is a cell. .red[每1格包含1个值] 阅读材料：What is “Tidy Data?” https://www.r-bloggers.com/what-is-tidy-data 2.11.1 修改细节，使之规范 ggplot(ToothGrowth, aes(x=dose, y=len, color=supp, shape=supp))+ theme_bw()+ #使用黑白主题，默认的是灰色主题 stat_summary(geom=&quot;line&quot;, fun=&quot;mean&quot;)+ stat_summary(geom=&quot;point&quot;, fun=&quot;mean&quot;)+ stat_summary(geom=&quot;errorbar&quot;, fun.min=function(x) mean(x)-sd(x), fun.max=function(x) mean(x)+sd(x), width=0.1)+ labs(x=&quot;Dose (mg/day)&quot;, #x轴标签 y=&quot;Tooth length (mm)&quot;, #y轴标签 color=&quot;Supplement&quot;, #颜色标签 shape=&quot;Supplement&quot;)+ #形状标签，与颜色的一致 scale_y_continuous(limits=c(0, NA))+ #y轴取值范围 theme(legend.position=c(0.8, 0.2), #图例的位置，左下角为(0,0),右上角为(1,1) legend.background = element_blank(), #使图例方框背景透明 legend.key = element_blank()) #使图例符号背景透明 ##ggasve()保存 保存下来的图片显示质量比预览的效果更好一些 ggsave(&quot;tooth_1.png&quot;, width=280/90, height=224/90, dpi=600) 2.12 当然，用“均值+标准差”格式的数据也可以作图 将此数据命名为d_tooth supp dose mean sd OJ 0.5 13.23 4.46 OJ 1.0 22.70 3.91 OJ 2.0 26.06 2.66 VC 0.5 7.98 2.75 VC 1.0 16.77 2.52 VC 2.0 26.14 4.80 d_tooth可以通过以下代码得到： library(dplyr) d_tooth &lt;- ToothGrowth %&gt;% group_by(supp, dose) %&gt;% summarise_at(vars(len), funs(mean, sd)) ## Warning: `funs()` was deprecated in dplyr 0.8.0. ## Please use a list of either functions or lambdas: ## ## # Simple named list: ## list(mean = mean, median = median) ## ## # Auto named with `tibble::lst()`: ## tibble::lst(mean, median) ## ## # Using lambdas ## list(~ mean(., trim = .2), ~ median(., na.rm = TRUE)) ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. 2.13 当然，用“均值+标注差”格式的数据也可以作图 用geom_line()画折线；geom_errorbar()画误差棒 ggplot(d_tooth, aes(x=dose, y=mean, color=supp, shape=supp))+ theme_bw()+ geom_point()+ #画点 geom_line()+ #画线 geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.1)+ #画误差棒，注意误差棒的上下限需用aes()映射到mean和sd上 labs(x=&quot;Dose (mg/day)&quot;, y=&quot;Tooth length (mm)&quot;, color=NULL, #去掉了颜色标签 shape=NULL)+ #去掉了形状标签 scale_y_continuous(limits=c(0, NA))+ theme(legend.position=c(0.8, 0.2), legend.background = element_blank(), legend.key = element_blank()) 2.14 用geom_col()画柱状图 不要用geom_bar()画柱状图–不是不可以，只是不是按你想的那样 ggplot(d_tooth, aes(x=dose, y=mean, color=supp))+ geom_col()+ geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.1) 这不是我们想要的 2.14.1 柱子的颜色用fill，柱子的边框才是color 2.14.2 若有多组柱子，需要dodge让他们错开，否则默认stack堆叠 ggplot(d_tooth, aes(x=dose, y=mean, fill=supp))+ geom_col(position=&quot;dodge&quot;)+ geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.1) 2.14.3 用position = position_dodge()，错开多组误差棒 ggplot(d_tooth, aes(x=dose, y=mean, fill=supp))+ geom_col(position=&quot;dodge&quot;)+ geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.1, position=position_dodge(width=0.45)) 2.14.4 把x轴的dose变为factor类型，使柱子之间等间隔 ggplot(d_tooth, aes(x=factor(dose), y=mean, fill=supp))+ geom_col(position=&quot;dodge&quot;)+ geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.1, position=position_dodge(width=0.9)) #注意width也改为0.9，这个可以试错出来 2.15 修改细节，使之规范 ggplot(d_tooth, aes(x=factor(dose), y=mean, fill=supp))+ theme_bw()+ geom_col(position=&quot;dodge&quot;, width = 0.7)+ geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd, color=supp), width=0.1, position=position_dodge(width=0.7))+ labs(x=expression(&quot;Dose (mg&quot;~d^&quot;-1&quot;*&quot;)&quot;), y=&quot;Tooth length (mm)&quot;, fill=NULL, color=NULL)+ theme(legend.position=c(0.1, 0.86), legend.background = element_blank(), legend.key = element_blank()) ##柱状图完成，ggasve()保存 除了默认的颜色土一点，基本达到发表的要求了（颜色以后我们专题讨论） ggsave(&quot;tooth_2.png&quot;, width=316/90, height=232/90, dpi=600) 2.16 直接用Tidy Data（ToothGrowth）作柱状图 ggplot(ToothGrowth, aes(x=factor(dose), y=len, fill=supp))+ theme_bw()+ stat_summary(geom=&quot;col&quot;, fun=&quot;mean&quot;, position=&quot;dodge&quot;, width = 0.7)+ stat_summary(geom=&quot;errorbar&quot;, fun.min=function(x) mean(x)-sd(x), fun.max=function(x) mean(x)+sd(x), aes(color=supp), width=0.1, position=position_dodge(width=0.7))+ labs(x=expression(&quot;Dose (mg&quot;~d^&quot;-1&quot;*&quot;)&quot;), y=&quot;Tooth length (mm)&quot;, fill=NULL, color=NULL)+ theme(legend.position=c(0.1, 0.86), legend.background = element_blank(), legend.key = element_blank()) 2.17 用geom_boxplot()画箱式图 ggplot(ToothGrowth, aes(dose, len, color=supp))+ geom_boxplot() 问题出在哪：dose是连续变量（numeric格式），不适合boxplot，需先转化为factor 2.18 用factor()将数值变量转化为因子 ggplot(ToothGrowth, aes(factor(dose), len, color=supp))+ geom_boxplot() ##修饰细节，使之规范 ggplot(ToothGrowth, aes(factor(dose), len, color=supp))+ theme_bw()+ geom_boxplot()+ labs(x=expression(&quot;Dose (mg&quot;~d^&quot;-1&quot;*&quot;)&quot;), y=&quot;Tooth length (mm)&quot;, color=NULL)+ theme(legend.position=c(0.1, 0.86), legend.background = element_blank(), legend.key = element_blank()) 2.19 要点小结 图 函数 点 geom_point() 线 geom_line() 柱 geom_col()推荐； geom_bar() 箱 geom_boxplot() 误差棒 geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd)) 统计-误差棒 stat_summary(geom=\"errorbar\", fun.min=function(x) mean(x)-sd(x), fun.max=function(x) mean(x)+sd(x)) 统计-均值点 stat_summary(geom=\"point\", fun=\"mean\") 统计-均值线 stat_summary(geom=\"line\", fun=\"mean\") 2.20 阅读作业 2.20.1 Hadley Wickham. 2016. ggplot2 Elegant Graphics for Data Analysis. .large2[Chapter 2. Getting Started with ggplot. pp. 11-32] .large2[Chapter 3. Toolbox. pp. 33-74] 2.21 进阶：拟合及结果可视化 R自带的另一套数据DNase &gt; Elisa assay of DNase &gt; Description &gt; The DNase data frame has 176 rows and 3 columns of data obtained during development of an ELISA assay for the recombinant protein DNase in rat serum. Source Davidian, M. and Giltinan, D. M. (1995) Nonlinear Models for Repeated Measurement Data, Chapman &amp; Hall (section 5.2.4, p. 134 ###这套数据和我们研究中遇到的数据很类似。用ELISA方法测定大鼠血清中的DNA酶，得到酶浓度和吸光度数据。实验做了11次，每次测定有平行样。 2.22 先用head()和str()来查看数据 head(DNase) ## Grouped Data: density ~ conc | Run ## Run conc density ## 1 1 0.04882812 0.017 ## 2 1 0.04882812 0.018 ## 3 1 0.19531250 0.121 ## 4 1 0.19531250 0.124 ## 5 1 0.39062500 0.206 ## 6 1 0.39062500 0.215 str(DNase) ## Classes &#39;nfnGroupedData&#39;, &#39;nfGroupedData&#39;, &#39;groupedData&#39; and &#39;data.frame&#39;: 176 obs. of 3 variables: ## $ Run : Ord.factor w/ 11 levels &quot;10&quot;&lt;&quot;11&quot;&lt;&quot;9&quot;&lt;..: 4 4 4 4 4 4 4 4 4 4 ... ## $ conc : num 0.0488 0.0488 0.1953 0.1953 0.3906 ... ## $ density: num 0.017 0.018 0.121 0.124 0.206 0.215 0.377 0.374 0.614 0.609 ... ## - attr(*, &quot;formula&quot;)=Class &#39;formula&#39; language density ~ conc | Run ## .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: R_EmptyEnv&gt; ## - attr(*, &quot;labels&quot;)=List of 2 ## ..$ x: chr &quot;DNase concentration&quot; ## ..$ y: chr &quot;Optical density&quot; ## - attr(*, &quot;units&quot;)=List of 1 ## ..$ x: chr &quot;(ng/ml)&quot; 注意：Run虽然是数字，类型却是factor，因此后面facet时可以直接操作，而无需转化为factor。 2.23 散点图是我们对数据进行探索分析的法宝 library(ggplot2) ggplot(DNase, aes(conc, density))+ geom_point() 这个数据让你想起了什么？有点像酶反应里的米氏动力学。确定分析方向：用米氏方程去拟合数据 2.24 均值+标准差（换一种方法） ggplot(DNase, aes(conc, density))+ geom_point(stat=&quot;summary&quot;, fun=&quot;mean&quot;)+ geom_errorbar(stat=&quot;summary&quot;, fun.min=function(x) mean(x)-sd(x), fun.max=function(x) mean(x)+sd(x), width=0.2) 2.25 对比两种等价的作图方法 方法1 方法2 geom_errorbar(stat=\"summary\",...) stat_summary(geom=\"errorbar\",...) geom_point(stat=\"summary\",...) stat_summary(geom=\"point\",...) geom_line(stat=\"summary\",...) stat_summary(geom=\"line\",...) … … 2.26 nls()非线性拟合米氏方程：手动提取拟合结果 米氏方程： \\(V=\\frac{V\\text{max}\\times C}{K_\\text{M}+C}\\) 非线性拟合 拟合前，仔细观察原始数据，运用你的智慧大致判断一下Vmax和KM的值 nls(density ~ conc * Vmax/(KM + conc), data=DNase, start=list(Vmax=2, KM=6) ) ## Nonlinear regression model ## model: density ~ conc * Vmax/(KM + conc) ## data: DNase ## Vmax KM ## 2.280 3.682 ## residual sum-of-squares: 0.4192 ## ## Number of iterations to convergence: 6 ## Achieved convergence tolerance: 5.139e-06 手动赋值 Vmax &lt;- 2.280 KM &lt;- 3.682 2.27 nls()非线性拟合米氏方程：自动提取拟合结果-1 将拟合结果存入fit fit &lt;- nls(density ~ conc * Vmax/(KM + conc), data=DNase, start=list(Vmax=2, KM=6) ) 查看结果 summary(fit) ## ## Formula: density ~ conc * Vmax/(KM + conc) ## ## Parameters: ## Estimate Std. Error t value Pr(&gt;|t|) ## Vmax 2.28032 0.02189 104.16 &lt;2e-16 *** ## KM 3.68241 0.08677 42.44 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.04909 on 174 degrees of freedom ## ## Number of iterations to convergence: 6 ## Achieved convergence tolerance: 5.139e-06 2.28 nls()非线性拟合米氏方程：自动提取拟合结果-2 查看都储存了哪些信息 names(summary(fit)) ## [1] &quot;formula&quot; &quot;residuals&quot; &quot;sigma&quot; &quot;df&quot; &quot;cov.unscaled&quot; ## [6] &quot;call&quot; &quot;convInfo&quot; &quot;control&quot; &quot;na.action&quot; &quot;coefficients&quot; ## [11] &quot;parameters&quot; 提取我们需要的参数拟合值 summary(fit)$coefficients ## Estimate Std. Error t value Pr(&gt;|t|) ## Vmax 2.280318 0.02189237 104.16041 1.073541e-158 ## KM 3.682409 0.08677038 42.43855 1.032031e-93 Vmax &lt;- summary(fit)$coefficients[1] KM &lt;- summary(fit)$coefficients[2] 2.29 生成画拟合线所需的数据 生成数据 fit_x &lt;- seq(0, 14, length.out=100) #生成100个x，涵盖原始数据范围 fit_y &lt;- Vmax * fit_x /(KM + fit_x) #将x和参数值代入米氏方程，计算y d_fit &lt;- data.frame(conc=fit_x, density=fit_y) #注意命名和原数据保持一致，可以不一致，但一致的话画图更简单 查看一下所生成的数据 head(d_fit) ## conc density ## 1 0.0000000 0.00000000 ## 2 0.1414141 0.08433162 ## 3 0.2828283 0.16264812 ## 4 0.4242424 0.23557091 ## 5 0.5656566 0.30363863 ## 6 0.7070707 0.36732053 2.30 添加拟合线 ggplot(DNase, aes(conc, density))+ geom_point(stat=&quot;summary&quot;, fun=&quot;mean&quot;)+ geom_errorbar(stat=&quot;summary&quot;, fun.min=function(x) mean(x)-sd(x), fun.max=function(x) mean(x)+sd(x), width=0.2)+ geom_line(data=d_fit) #不需要设定aes(x=,y=)，因为继承了第1行代码的设定；如果xy名字与原数据不一样，则需设定。 2.31 修饰细节 ggplot(DNase, aes(conc, density))+ theme_bw()+ geom_line(data=d_fit, size=0.7, alpha=0.7, color=&quot;red2&quot;)+ geom_point(stat=&quot;summary&quot;, fun=&quot;mean&quot;, color=&quot;grey30&quot;, alpha=0.7)+ geom_errorbar(stat=&quot;summary&quot;, fun.min=function(x) mean(x)-sd(x), fun.max=function(x) mean(x)+sd(x), width=0.2)+ labs(x=expression(&quot;DNase concentration (ng&quot;~mL^&quot;-1&quot;*&quot;)&quot;), y=&quot;Optical density&quot;)+ annotate(geom=&quot;text&quot;, x=10, y=0.5,label=expression(OD==frac(OD[max], italic(K)[M]+italic(C)))) # 添加公式 ## Warning in is.na(x): is.na() applied to non-(list or vector) of type ## &#39;expression&#39; 2.32 如何在图上添加数学公式？ annotate(geom=\"text\", x=..., y=..., label=...) .red[?plotmath]查看各种公式的代码 例如： Syntax Meaning Syntax Meaning x + y x plus y sqrt(x) square root of x x - y x minus y x == y x equals y x %+-% y x plus or minus y italic(x) draw x in italic font x %.% y x cdot y alpha – omega Greek symbols x[i] x subscript i frac(x, y) x over y x^2 x superscript 2 … … 2.33 另一个探索数据的超级武器：分面facet 有两种分面： - facet_wrap(~因子)：针对1个因子，1维分面 - facet_grid(因子1~因子2)：针对2个因子，2维分面 ggplot(DNase, aes(conc, density))+ geom_point()+ facet_wrap(~Run) # 针对Run这个因子分面 每个Run都单独作图，数据趋势类似 每组数据可以单独拟合，看看参数的变异程度 2.34 运用for()循环语句，批量拟合11组数据 N &lt;- length(unique(DNase$Run)) # 有几组数据？直译：不重复的Run这个向量的长度 Vmax_each &lt;- numeric(N) #生成长度为N的向量，以备存储拟合值 KM_each &lt;- numeric(N) #运用循环语句，每次拟合1组数据 for (i in 1 : N) { d_i &lt;- subset(DNase, Run==i) #把第i组数据筛选出来 fit_i &lt;- nls(density ~ conc * Vmax/(KM + conc), data=d_i, start=list(Vmax=2, KM=6) ) Vmax_each[i] &lt;- summary(fit_i)$coefficients[1] #第i个拟合结果存入向量第i个位置 KM_each[i] &lt;- summary(fit_i)$coefficients[2] #同上 } 将拟合值存入数据表备用 d_Vmax_KM &lt;- data.frame(Vmax_each, KM_each) ##查看一下11组拟合结果 d_Vmax_KM ## Vmax_each KM_each ## 1 2.258552 4.021074 ## 2 2.591009 4.305742 ## 3 2.571666 4.120585 ## 4 2.333150 4.227158 ## 5 2.264528 3.725127 ## 6 2.246484 3.380303 ## 7 2.171841 3.264675 ## 8 2.254738 3.727607 ## 9 2.173733 3.423064 ## 10 2.087056 3.032812 ## 11 2.168591 3.413008 mean(Vmax_each) ## [1] 2.283759 sd(Vmax_each) ## [1] 0.1611077 mean(KM_each) ## [1] 3.69465 sd(KM_each) ## [1] 0.4268242 2.35 生成画11条拟合线的数据 fit_x_11 &lt;- rep(seq(0, 14, length.out=100), times=11) #生成等间距x值100个，重复11次 Vmax_11 &lt;- rep(Vmax_each, each=100) #复制Vmax，复制100份 KM_11 &lt;- rep(KM_each, each=100) #复制KM，复制100份 fit_y_11 &lt;- Vmax_11 * fit_x_11 /(KM_11 + fit_x_11) #将以上三者代入米氏方程，计算y（想象一下你熟悉的excel，操作其实是一样的） Run &lt;- rep(1:11, each=100) #复制Run编号，复制100份 d_fit_11 &lt;- data.frame(conc=fit_x_11, density=fit_y_11, Run=Run) 2.36 画11条拟合线 ggplot(DNase, aes(conc, density))+ geom_point()+ facet_wrap(~Run)+ geom_line(data=d_fit_11) # 把11条拟合线画上去 2.37 修改细节 #把这11个Run从1到11重新排好顺序 DNase$Run &lt;- factor(DNase$Run, levels=c(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;, &quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;10&quot;,&quot;11&quot;)) d_fit_11$Run &lt;- factor(d_fit_11$Run, levels=c(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;, &quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;10&quot;,&quot;11&quot;)) ggplot(DNase, aes(conc, density))+ theme_bw()+ geom_point(alpha=0.6)+ facet_wrap(~Run)+ geom_line(data=d_fit_11, size=0.7, color=&quot;red2&quot;)+ labs(x=expression(&quot;DNase concentration (ng&quot;~mL^&quot;-1&quot;*&quot;)&quot;), y=&quot;Optical density&quot;) ## 图上各主题元素的修改方法 参考此网页：https://ggplot2.tidyverse.org/reference/theme.html ## 要点小结 理解两种等价的作图方式(若有困难，选一种你觉得容易理解的记住) - geom_xxx(stat=\"summary\") == stat_summary(geom=\"xxx\") 添加拟合线 - nls()非线性拟合 - summary()查看、提取拟合结果 - seq()，rep()生成作图数据的有力工具 添加数学公式 - annotate() 往图上添加公式、文字 - ?plotmath 查看数学公式对应的代码 facet分面功能：数据分析的世界因此而美好 for()循环语句：把重复的工作交给电脑 # 颜色的使用 ## 颜色的使用 * 离散变量-自动配色 * 离散变量-手动配色 * 连续变量-自动配色 * 连续变量-手动配色 ## 离散变量-自动配色 scale_color_brewer(palette=...) scale_fill_brewer(palette=...) r p1 &lt;- ggplot(mpg, aes(displ, hwy, color = class))+ geom_point() p1 r p2 &lt;- ggplot(mpg, aes(class, fill = class))+ geom_bar() p2 ### 查看R系统自带配色 用?scale_color_brewer查询 * 点图–使用各种自动配色:以mpg数据为例 Qualitative（定性色） Accent, Dark2, Paired, Pastel1, Pastel2, Set1, Set2, Set3 更适合于连续变量。适用于热图、等高线图、地图等 ```r library(RColorBrewer) RColorBrewer::brewer.pal.info ``` ## maxcolors category colorblind ## BrBG 11 div TRUE ## PiYG 11 div TRUE ## PRGn 11 div TRUE ## PuOr 11 div TRUE ## RdBu 11 div TRUE ## RdGy 11 div FALSE ## RdYlBu 11 div TRUE ## RdYlGn 11 div FALSE ## Spectral 11 div FALSE ## Accent 8 qual FALSE ## Dark2 8 qual TRUE ## Paired 12 qual TRUE ## Pastel1 9 qual FALSE ## Pastel2 8 qual FALSE ## Set1 9 qual FALSE ## Set2 8 qual TRUE ## Set3 12 qual FALSE ## Blues 9 seq TRUE ## BuGn 9 seq TRUE ## BuPu 9 seq TRUE ## GnBu 9 seq TRUE ## Greens 9 seq TRUE ## Greys 9 seq TRUE ## Oranges 9 seq TRUE ## OrRd 9 seq TRUE ## PuBu 9 seq TRUE ## PuBuGn 9 seq TRUE ## PuRd 9 seq TRUE ## Purples 9 seq TRUE ## RdPu 9 seq TRUE ## Reds 9 seq TRUE ## YlGn 9 seq TRUE ## YlGnBu 9 seq TRUE ## YlOrBr 9 seq TRUE ## YlOrRd 9 seq TRUE r RColorBrewer::display.brewer.all() r RColorBrewer::brewer.pal.info ## maxcolors category colorblind ## BrBG 11 div TRUE ## PiYG 11 div TRUE ## PRGn 11 div TRUE ## PuOr 11 div TRUE ## RdBu 11 div TRUE ## RdGy 11 div FALSE ## RdYlBu 11 div TRUE ## RdYlGn 11 div FALSE ## Spectral 11 div FALSE ## Accent 8 qual FALSE ## Dark2 8 qual TRUE ## Paired 12 qual TRUE ## Pastel1 9 qual FALSE ## Pastel2 8 qual FALSE ## Set1 9 qual FALSE ## Set2 8 qual TRUE ## Set3 12 qual FALSE ## Blues 9 seq TRUE ## BuGn 9 seq TRUE ## BuPu 9 seq TRUE ## GnBu 9 seq TRUE ## Greens 9 seq TRUE ## Greys 9 seq TRUE ## Oranges 9 seq TRUE ## OrRd 9 seq TRUE ## PuBu 9 seq TRUE ## PuBuGn 9 seq TRUE ## PuRd 9 seq TRUE ## Purples 9 seq TRUE ## RdPu 9 seq TRUE ## Reds 9 seq TRUE ## YlGn 9 seq TRUE ## YlGnBu 9 seq TRUE ## YlOrBr 9 seq TRUE ## YlOrRd 9 seq TRUE r rownames(RColorBrewer::brewer.pal.info) ## [1] \"BrBG\" \"PiYG\" \"PRGn\" \"PuOr\" \"RdBu\" \"RdGy\" ## [7] \"RdYlBu\" \"RdYlGn\" \"Spectral\" \"Accent\" \"Dark2\" \"Paired\" ## [13] \"Pastel1\" \"Pastel2\" \"Set1\" \"Set2\" \"Set3\" \"Blues\" ## [19] \"BuGn\" \"BuPu\" \"GnBu\" \"Greens\" \"Greys\" \"Oranges\" ## [25] \"OrRd\" \"PuBu\" \"PuBuGn\" \"PuRd\" \"Purples\" \"RdPu\" ## [31] \"Reds\" \"YlGn\" \"YlGnBu\" \"YlOrBr\" \"YlOrRd\" ### 使用R系统自带配色 r p1 + scale_color_brewer(palette=\"Set1\") r p2 + scale_fill_brewer(palette=\"Set1\") r p1 + scale_color_brewer(palette=\"Set3\") r p2 + scale_fill_brewer(palette=\"Set3\") r p1 + scale_color_brewer(palette = \"Accent\") r p2 + scale_fill_brewer(palette = \"Accent\") r p1 + scale_color_brewer(palette = \"Dark2\") r p2 + scale_fill_brewer(palette = \"Dark2\") r p1+ scale_color_brewer(palette = \"BrBG\") r p2 + scale_fill_brewer(palette = \"BrBG\") ### 色盲友好的viridis配色 ?scale_fill_viridis_d r p1 + scale_color_viridis_d() r p2 + scale_fill_viridis_d() r p1 + scale_color_viridis_d(option = \"A\") r p2 + scale_fill_viridis_d(option = \"A\") r p1 + scale_color_viridis_d(option = \"B\") r p2 + scale_fill_viridis_d(option = \"B\") r p1 + scale_color_viridis_d(option = \"F\") r p2 + scale_fill_viridis_d(option = \"F\") * 离散变量-手动配色 scale_color_manual(values=...) scale_fill_manual(values=...) r p1 + scale_color_manual(values=c(\"red\",\"orange\",\"yellow\",\"green\",\"blue\",\"grey\",\"black\")) r p2 + scale_fill_manual(values=c(\"red\",\"orange\",\"yellow\",\"green\",\"blue\",\"grey\",\"black\")) ### 如何知道各种颜色的名称？colors() r colors() ## [1] \"white\" \"aliceblue\" \"antiquewhite\" ## [4] \"antiquewhite1\" \"antiquewhite2\" \"antiquewhite3\" ## [7] \"antiquewhite4\" \"aquamarine\" \"aquamarine1\" ## [10] \"aquamarine2\" \"aquamarine3\" \"aquamarine4\" ## [13] \"azure\" \"azure1\" \"azure2\" ## [16] \"azure3\" \"azure4\" \"beige\" ## [19] \"bisque\" \"bisque1\" \"bisque2\" ## [22] \"bisque3\" \"bisque4\" \"black\" ## [25] \"blanchedalmond\" \"blue\" \"blue1\" ## [28] \"blue2\" \"blue3\" \"blue4\" ## [31] \"blueviolet\" \"brown\" \"brown1\" ## [34] \"brown2\" \"brown3\" \"brown4\" ## [37] \"burlywood\" \"burlywood1\" \"burlywood2\" ## [40] \"burlywood3\" \"burlywood4\" \"cadetblue\" ## [43] \"cadetblue1\" \"cadetblue2\" \"cadetblue3\" ## [46] \"cadetblue4\" \"chartreuse\" \"chartreuse1\" ## [49] \"chartreuse2\" \"chartreuse3\" \"chartreuse4\" ## [52] \"chocolate\" \"chocolate1\" \"chocolate2\" ## [55] \"chocolate3\" \"chocolate4\" \"coral\" ## [58] \"coral1\" \"coral2\" \"coral3\" ## [61] \"coral4\" \"cornflowerblue\" \"cornsilk\" ## [64] \"cornsilk1\" \"cornsilk2\" \"cornsilk3\" ## [67] \"cornsilk4\" \"cyan\" \"cyan1\" ## [70] \"cyan2\" \"cyan3\" \"cyan4\" ## [73] \"darkblue\" \"darkcyan\" \"darkgoldenrod\" ## [76] \"darkgoldenrod1\" \"darkgoldenrod2\" \"darkgoldenrod3\" ## [79] \"darkgoldenrod4\" \"darkgray\" \"darkgreen\" ## [82] \"darkgrey\" \"darkkhaki\" \"darkmagenta\" ## [85] \"darkolivegreen\" \"darkolivegreen1\" \"darkolivegreen2\" ## [88] \"darkolivegreen3\" \"darkolivegreen4\" \"darkorange\" ## [91] \"darkorange1\" \"darkorange2\" \"darkorange3\" ## [94] \"darkorange4\" \"darkorchid\" \"darkorchid1\" ## [97] \"darkorchid2\" \"darkorchid3\" \"darkorchid4\" ## [100] \"darkred\" \"darksalmon\" \"darkseagreen\" ## [103] \"darkseagreen1\" \"darkseagreen2\" \"darkseagreen3\" ## [106] \"darkseagreen4\" \"darkslateblue\" \"darkslategray\" ## [109] \"darkslategray1\" \"darkslategray2\" \"darkslategray3\" ## [112] \"darkslategray4\" \"darkslategrey\" \"darkturquoise\" ## [115] \"darkviolet\" \"deeppink\" \"deeppink1\" ## [118] \"deeppink2\" \"deeppink3\" \"deeppink4\" ## [121] \"deepskyblue\" \"deepskyblue1\" \"deepskyblue2\" ## [124] \"deepskyblue3\" \"deepskyblue4\" \"dimgray\" ## [127] \"dimgrey\" \"dodgerblue\" \"dodgerblue1\" ## [130] \"dodgerblue2\" \"dodgerblue3\" \"dodgerblue4\" ## [133] \"firebrick\" \"firebrick1\" \"firebrick2\" ## [136] \"firebrick3\" \"firebrick4\" \"floralwhite\" ## [139] \"forestgreen\" \"gainsboro\" \"ghostwhite\" ## [142] \"gold\" \"gold1\" \"gold2\" ## [145] \"gold3\" \"gold4\" \"goldenrod\" ## [148] \"goldenrod1\" \"goldenrod2\" \"goldenrod3\" ## [151] \"goldenrod4\" \"gray\" \"gray0\" ## [154] \"gray1\" \"gray2\" \"gray3\" ## [157] \"gray4\" \"gray5\" \"gray6\" ## [160] \"gray7\" \"gray8\" \"gray9\" ## [163] \"gray10\" \"gray11\" \"gray12\" ## [166] \"gray13\" \"gray14\" \"gray15\" ## [169] \"gray16\" \"gray17\" \"gray18\" ## [172] \"gray19\" \"gray20\" \"gray21\" ## [175] \"gray22\" \"gray23\" \"gray24\" ## [178] \"gray25\" \"gray26\" \"gray27\" ## [181] \"gray28\" \"gray29\" \"gray30\" ## [184] \"gray31\" \"gray32\" \"gray33\" ## [187] \"gray34\" \"gray35\" \"gray36\" ## [190] \"gray37\" \"gray38\" \"gray39\" ## [193] \"gray40\" \"gray41\" \"gray42\" ## [196] \"gray43\" \"gray44\" \"gray45\" ## [199] \"gray46\" \"gray47\" \"gray48\" ## [202] \"gray49\" \"gray50\" \"gray51\" ## [205] \"gray52\" \"gray53\" \"gray54\" ## [208] \"gray55\" \"gray56\" \"gray57\" ## [211] \"gray58\" \"gray59\" \"gray60\" ## [214] \"gray61\" \"gray62\" \"gray63\" ## [217] \"gray64\" \"gray65\" \"gray66\" ## [220] \"gray67\" \"gray68\" \"gray69\" ## [223] \"gray70\" \"gray71\" \"gray72\" ## [226] \"gray73\" \"gray74\" \"gray75\" ## [229] \"gray76\" \"gray77\" \"gray78\" ## [232] \"gray79\" \"gray80\" \"gray81\" ## [235] \"gray82\" \"gray83\" \"gray84\" ## [238] \"gray85\" \"gray86\" \"gray87\" ## [241] \"gray88\" \"gray89\" \"gray90\" ## [244] \"gray91\" \"gray92\" \"gray93\" ## [247] \"gray94\" \"gray95\" \"gray96\" ## [250] \"gray97\" \"gray98\" \"gray99\" ## [253] \"gray100\" \"green\" \"green1\" ## [256] \"green2\" \"green3\" \"green4\" ## [259] \"greenyellow\" \"grey\" \"grey0\" ## [262] \"grey1\" \"grey2\" \"grey3\" ## [265] \"grey4\" \"grey5\" \"grey6\" ## [268] \"grey7\" \"grey8\" \"grey9\" ## [271] \"grey10\" \"grey11\" \"grey12\" ## [274] \"grey13\" \"grey14\" \"grey15\" ## [277] \"grey16\" \"grey17\" \"grey18\" ## [280] \"grey19\" \"grey20\" \"grey21\" ## [283] \"grey22\" \"grey23\" \"grey24\" ## [286] \"grey25\" \"grey26\" \"grey27\" ## [289] \"grey28\" \"grey29\" \"grey30\" ## [292] \"grey31\" \"grey32\" \"grey33\" ## [295] \"grey34\" \"grey35\" \"grey36\" ## [298] \"grey37\" \"grey38\" \"grey39\" ## [301] \"grey40\" \"grey41\" \"grey42\" ## [304] \"grey43\" \"grey44\" \"grey45\" ## [307] \"grey46\" \"grey47\" \"grey48\" ## [310] \"grey49\" \"grey50\" \"grey51\" ## [313] \"grey52\" \"grey53\" \"grey54\" ## [316] \"grey55\" \"grey56\" \"grey57\" ## [319] \"grey58\" \"grey59\" \"grey60\" ## [322] \"grey61\" \"grey62\" \"grey63\" ## [325] \"grey64\" \"grey65\" \"grey66\" ## [328] \"grey67\" \"grey68\" \"grey69\" ## [331] \"grey70\" \"grey71\" \"grey72\" ## [334] \"grey73\" \"grey74\" \"grey75\" ## [337] \"grey76\" \"grey77\" \"grey78\" ## [340] \"grey79\" \"grey80\" \"grey81\" ## [343] \"grey82\" \"grey83\" \"grey84\" ## [346] \"grey85\" \"grey86\" \"grey87\" ## [349] \"grey88\" \"grey89\" \"grey90\" ## [352] \"grey91\" \"grey92\" \"grey93\" ## [355] \"grey94\" \"grey95\" \"grey96\" ## [358] \"grey97\" \"grey98\" \"grey99\" ## [361] \"grey100\" \"honeydew\" \"honeydew1\" ## [364] \"honeydew2\" \"honeydew3\" \"honeydew4\" ## [367] \"hotpink\" \"hotpink1\" \"hotpink2\" ## [370] \"hotpink3\" \"hotpink4\" \"indianred\" ## [373] \"indianred1\" \"indianred2\" \"indianred3\" ## [376] \"indianred4\" \"ivory\" \"ivory1\" ## [379] \"ivory2\" \"ivory3\" \"ivory4\" ## [382] \"khaki\" \"khaki1\" \"khaki2\" ## [385] \"khaki3\" \"khaki4\" \"lavender\" ## [388] \"lavenderblush\" \"lavenderblush1\" \"lavenderblush2\" ## [391] \"lavenderblush3\" \"lavenderblush4\" \"lawngreen\" ## [394] \"lemonchiffon\" \"lemonchiffon1\" \"lemonchiffon2\" ## [397] \"lemonchiffon3\" \"lemonchiffon4\" \"lightblue\" ## [400] \"lightblue1\" \"lightblue2\" \"lightblue3\" ## [403] \"lightblue4\" \"lightcoral\" \"lightcyan\" ## [406] \"lightcyan1\" \"lightcyan2\" \"lightcyan3\" ## [409] \"lightcyan4\" \"lightgoldenrod\" \"lightgoldenrod1\" ## [412] \"lightgoldenrod2\" \"lightgoldenrod3\" \"lightgoldenrod4\" ## [415] \"lightgoldenrodyellow\" \"lightgray\" \"lightgreen\" ## [418] \"lightgrey\" \"lightpink\" \"lightpink1\" ## [421] \"lightpink2\" \"lightpink3\" \"lightpink4\" ## [424] \"lightsalmon\" \"lightsalmon1\" \"lightsalmon2\" ## [427] \"lightsalmon3\" \"lightsalmon4\" \"lightseagreen\" ## [430] \"lightskyblue\" \"lightskyblue1\" \"lightskyblue2\" ## [433] \"lightskyblue3\" \"lightskyblue4\" \"lightslateblue\" ## [436] \"lightslategray\" \"lightslategrey\" \"lightsteelblue\" ## [439] \"lightsteelblue1\" \"lightsteelblue2\" \"lightsteelblue3\" ## [442] \"lightsteelblue4\" \"lightyellow\" \"lightyellow1\" ## [445] \"lightyellow2\" \"lightyellow3\" \"lightyellow4\" ## [448] \"limegreen\" \"linen\" \"magenta\" ## [451] \"magenta1\" \"magenta2\" \"magenta3\" ## [454] \"magenta4\" \"maroon\" \"maroon1\" ## [457] \"maroon2\" \"maroon3\" \"maroon4\" ## [460] \"mediumaquamarine\" \"mediumblue\" \"mediumorchid\" ## [463] \"mediumorchid1\" \"mediumorchid2\" \"mediumorchid3\" ## [466] \"mediumorchid4\" \"mediumpurple\" \"mediumpurple1\" ## [469] \"mediumpurple2\" \"mediumpurple3\" \"mediumpurple4\" ## [472] \"mediumseagreen\" \"mediumslateblue\" \"mediumspringgreen\" ## [475] \"mediumturquoise\" \"mediumvioletred\" \"midnightblue\" ## [478] \"mintcream\" \"mistyrose\" \"mistyrose1\" ## [481] \"mistyrose2\" \"mistyrose3\" \"mistyrose4\" ## [484] \"moccasin\" \"navajowhite\" \"navajowhite1\" ## [487] \"navajowhite2\" \"navajowhite3\" \"navajowhite4\" ## [490] \"navy\" \"navyblue\" \"oldlace\" ## [493] \"olivedrab\" \"olivedrab1\" \"olivedrab2\" ## [496] \"olivedrab3\" \"olivedrab4\" \"orange\" ## [499] \"orange1\" \"orange2\" \"orange3\" ## [502] \"orange4\" \"orangered\" \"orangered1\" ## [505] \"orangered2\" \"orangered3\" \"orangered4\" ## [508] \"orchid\" \"orchid1\" \"orchid2\" ## [511] \"orchid3\" \"orchid4\" \"palegoldenrod\" ## [514] \"palegreen\" \"palegreen1\" \"palegreen2\" ## [517] \"palegreen3\" \"palegreen4\" \"paleturquoise\" ## [520] \"paleturquoise1\" \"paleturquoise2\" \"paleturquoise3\" ## [523] \"paleturquoise4\" \"palevioletred\" \"palevioletred1\" ## [526] \"palevioletred2\" \"palevioletred3\" \"palevioletred4\" ## [529] \"papayawhip\" \"peachpuff\" \"peachpuff1\" ## [532] \"peachpuff2\" \"peachpuff3\" \"peachpuff4\" ## [535] \"peru\" \"pink\" \"pink1\" ## [538] \"pink2\" \"pink3\" \"pink4\" ## [541] \"plum\" \"plum1\" \"plum2\" ## [544] \"plum3\" \"plum4\" \"powderblue\" ## [547] \"purple\" \"purple1\" \"purple2\" ## [550] \"purple3\" \"purple4\" \"red\" ## [553] \"red1\" \"red2\" \"red3\" ## [556] \"red4\" \"rosybrown\" \"rosybrown1\" ## [559] \"rosybrown2\" \"rosybrown3\" \"rosybrown4\" ## [562] \"royalblue\" \"royalblue1\" \"royalblue2\" ## [565] \"royalblue3\" \"royalblue4\" \"saddlebrown\" ## [568] \"salmon\" \"salmon1\" \"salmon2\" ## [571] \"salmon3\" \"salmon4\" \"sandybrown\" ## [574] \"seagreen\" \"seagreen1\" \"seagreen2\" ## [577] \"seagreen3\" \"seagreen4\" \"seashell\" ## [580] \"seashell1\" \"seashell2\" \"seashell3\" ## [583] \"seashell4\" \"sienna\" \"sienna1\" ## [586] \"sienna2\" \"sienna3\" \"sienna4\" ## [589] \"skyblue\" \"skyblue1\" \"skyblue2\" ## [592] \"skyblue3\" \"skyblue4\" \"slateblue\" ## [595] \"slateblue1\" \"slateblue2\" \"slateblue3\" ## [598] \"slateblue4\" \"slategray\" \"slategray1\" ## [601] \"slategray2\" \"slategray3\" \"slategray4\" ## [604] \"slategrey\" \"snow\" \"snow1\" ## [607] \"snow2\" \"snow3\" \"snow4\" ## [610] \"springgreen\" \"springgreen1\" \"springgreen2\" ## [613] \"springgreen3\" \"springgreen4\" \"steelblue\" ## [616] \"steelblue1\" \"steelblue2\" \"steelblue3\" ## [619] \"steelblue4\" \"tan\" \"tan1\" ## [622] \"tan2\" \"tan3\" \"tan4\" ## [625] \"thistle\" \"thistle1\" \"thistle2\" ## [628] \"thistle3\" \"thistle4\" \"tomato\" ## [631] \"tomato1\" \"tomato2\" \"tomato3\" ## [634] \"tomato4\" \"turquoise\" \"turquoise1\" ## [637] \"turquoise2\" \"turquoise3\" \"turquoise4\" ## [640] \"violet\" \"violetred\" \"violetred1\" ## [643] \"violetred2\" \"violetred3\" \"violetred4\" ## [646] \"wheat\" \"wheat1\" \"wheat2\" ## [649] \"wheat3\" \"wheat4\" \"whitesmoke\" ## [652] \"yellow\" \"yellow1\" \"yellow2\" ## [655] \"yellow3\" \"yellow4\" \"yellowgreen\" r colors()[1:9] ## [1] \"white\" \"aliceblue\" \"antiquewhite\" \"antiquewhite1\" ## [5] \"antiquewhite2\" \"antiquewhite3\" \"antiquewhite4\" \"aquamarine\" ## [9] \"aquamarine1\" r scales::show_col(colors()[100:108]) ### 如何预览各种颜色？ scales::show_col() r library(scales) show_col(\"springgreen\") r show_col(c(\"springgreen\",\"snow4\",\"violetred\",\"skyblue1\", \"steelblue1\",\"navy\", \"lightsteelblue3\",\"turquoise2\",\"rosybrown\")) r show_col(colors()[10:20]) ### 如何设置出谐调、美观、科学的配色？ 去配色程序包里找，去配色网站找，去艺术品里找，去大自然找。 查看颜色的程序包 r RColorBrewer::brewer.pal(n=8, name = \"Set1\") ## [1] \"#E41A1C\" \"#377EB8\" \"#4DAF4A\" \"#984EA3\" \"#FF7F00\" \"#FFFF33\" \"#A65628\" ## [8] \"#F781BF\" r mycol &lt;- RColorBrewer::brewer.pal(n=8, name = \"Set1\") mycol ## [1] \"#E41A1C\" \"#377EB8\" \"#4DAF4A\" \"#984EA3\" \"#FF7F00\" \"#FFFF33\" \"#A65628\" ## [8] \"#F781BF\" ```r show_col(mycol) brewer.pal(8, “Set1”) #提取“Set1”配色中的颜色代码 ``` ## [1] \"#E41A1C\" \"#377EB8\" \"#4DAF4A\" \"#984EA3\" \"#FF7F00\" \"#FFFF33\" \"#A65628\" ## [8] \"#F781BF\" r show_col(brewer.pal(8, \"Set1\")) ggsci 配色程序包 ```r library(ggsci) ggsci::pal_aaas()(10) ``` ## [1] \"#3B4992FF\" \"#EE0000FF\" \"#008B45FF\" \"#631879FF\" \"#008280FF\" \"#BB0021FF\" ## [7] \"#5F559BFF\" \"#A20056FF\" \"#808180FF\" \"#1B1919FF\" r show_col(ggsci::pal_aaas()(10)) r ggsci::pal_npg()(10) ## [1] \"#E64B35FF\" \"#4DBBD5FF\" \"#00A087FF\" \"#3C5488FF\" \"#F39B7FFF\" \"#8491B4FF\" ## [7] \"#91D1C2FF\" \"#DC0000FF\" \"#7E6148FF\" \"#B09C85FF\" r show_col(ggsci::pal_npg()(10)) r show_col(ggsci::pal_simpsons()(10)) r ggsci::pal_aaas()(10) ## [1] \"#3B4992FF\" \"#EE0000FF\" \"#008B45FF\" \"#631879FF\" \"#008280FF\" \"#BB0021FF\" ## [7] \"#5F559BFF\" \"#A20056FF\" \"#808180FF\" \"#1B1919FF\" r show_col(ggsci::pal_aaas()(10)) r p1 + scale_color_aaas() r p2 + scale_fill_aaas() r p1 + scale_color_npg() r p2 + scale_fill_npg() r p1 + scale_color_manual(values=ggsci::pal_aaas()(10)) r p2 + scale_fill_manual(values=ggsci::pal_aaas()(10)) r ggsci::pal_d3()(10) ## [1] \"#1F77B4FF\" \"#FF7F0EFF\" \"#2CA02CFF\" \"#D62728FF\" \"#9467BDFF\" \"#8C564BFF\" ## [7] \"#E377C2FF\" \"#7F7F7FFF\" \"#BCBD22FF\" \"#17BECFFF\" r show_col(ggsci::pal_d3()(10)) r ggsci::pal_futurama()(10) ## [1] \"#FF6F00FF\" \"#C71000FF\" \"#008EA0FF\" \"#8A4198FF\" \"#5A9599FF\" \"#FF6348FF\" ## [7] \"#84D7E1FF\" \"#FF95A8FF\" \"#3D3B25FF\" \"#ADE2D0FF\" r show_col(ggsci::pal_futurama()(10)) r ggsci::pal_gsea()(10) ## [1] \"#4500ACFF\" \"#2600D1FF\" \"#6B58EEFF\" \"#8787FFFF\" \"#C6C0FFFF\" \"#D4D4FFFF\" ## [7] \"#FFBFE5FF\" \"#FF8888FF\" \"#FF707FFF\" \"#FF5959FF\" r show_col(ggsci::pal_gsea()(10)) r ggsci::pal_nejm()(10) ## Warning: This manual palette can handle a maximum of 8 values. You have supplied ## 10. ## [1] \"#BC3C29FF\" \"#0072B5FF\" \"#E18727FF\" \"#20854EFF\" \"#7876B1FF\" \"#6F99ADFF\" ## [7] \"#FFDC91FF\" \"#EE4C97FF\" NA NA r show_col(ggsci::pal_nejm()(10)) ## Warning: This manual palette can handle a maximum of 8 values. You have supplied ## 10. r ggsci::pal_npg()(10) ## [1] \"#E64B35FF\" \"#4DBBD5FF\" \"#00A087FF\" \"#3C5488FF\" \"#F39B7FFF\" \"#8491B4FF\" ## [7] \"#91D1C2FF\" \"#DC0000FF\" \"#7E6148FF\" \"#B09C85FF\" r show_col(ggsci::pal_npg()(10)) 去大自然里找，去生活里找 r pal_cee &lt;- c(\"#DA1718\", \"#CE9F9F\", \"#36536D\", \"#5092E1\", \"#D8E8F9\", \"#526B13\", \"#97B325\", \"#876454\", \"#C0C0CC\") show_col(pal_cee) r p1 + scale_color_manual(values=pal_cee) r p2 + scale_fill_manual(values=pal_cee) 去艺术品里找 r pal_qljs &lt;- c(\"#1F394D\", \"#EEC979\", \"#C4CBC2\", \"#5A6683\", \"#BB9555\", \"#CDE5BC\", \"#356183\", \"#24211F\", \"#E9C3BC\") show_col(pal_qljs) r p1 + scale_color_manual(values=pal_qljs) r p2 + scale_fill_manual(values = pal_qljs) * 网站配色 https://coolors.co/ 5种颜色一组，地址栏直接获取Hex颜色代码 https://medialab.github.io/iwanthue/ 颜色数量较多时自动配色 * Pantone配色 ```r Pantone &lt;- c(“#34558b,” “#d13b40,” “#ffaf12,” “#4ec5a5,” “#565d47,” “#798fa8,” “#fd823e,” “#117893,” “#f0daa4,” “#eaac9d,” “#a2553a,” “#72617d,” “#b49c73,” “#3b3d4b,” “#eff0f1,” “#a09d9c,” “#191970,” “#bc243c,” “#585ea6,” “#F5DF4D”) show_col(Pantone) ``` ## 连续变量-自动配色 scale_color_distiller(palette=...) scale_fill_distiller(palette=...) 代码：颜色映射到连续变量 scale_fill_distiller(palette=…) 利用系统的配色方案插值得到连续配色，常用 ```r d2 &lt;- tidyr::crossing(x = seq(-10, 10, 0.1), y = seq(-10, 10, 0.1)) %&gt;% mutate(z = sin(sin(x * (sin(y) - cos(x)))) - cos(cos(y * (cos(x) - sin(y))))) p &lt;- ggplot(d2, aes(x, y)) + geom_raster(aes(fill = z)) p ``` r p &lt;- p + coord_equal() p Sequential（渐变色） Blues, BuGn, BuPu, GnBu, Greens, Greys, Oranges, OrRd, PuBu, PuBuGn, PuRd, Purples, RdPu, Reds, YlGn, YlGnBu, YlOrBr, YlOrRd Diverging（分裂色） BrBG, PiYG, PRGn, PuOr, RdBu, RdGy, RdYlBu, RdYlGn, Spectral scale_color_brewer(palette =...) 使用自动配色方案，常用 scale_color_manual(values = c(...)) 手动配色，常用 ### 自动配色 r RColorBrewer::brewer.pal.info ## maxcolors category colorblind ## BrBG 11 div TRUE ## PiYG 11 div TRUE ## PRGn 11 div TRUE ## PuOr 11 div TRUE ## RdBu 11 div TRUE ## RdGy 11 div FALSE ## RdYlBu 11 div TRUE ## RdYlGn 11 div FALSE ## Spectral 11 div FALSE ## Accent 8 qual FALSE ## Dark2 8 qual TRUE ## Paired 12 qual TRUE ## Pastel1 9 qual FALSE ## Pastel2 8 qual FALSE ## Set1 9 qual FALSE ## Set2 8 qual TRUE ## Set3 12 qual FALSE ## Blues 9 seq TRUE ## BuGn 9 seq TRUE ## BuPu 9 seq TRUE ## GnBu 9 seq TRUE ## Greens 9 seq TRUE ## Greys 9 seq TRUE ## Oranges 9 seq TRUE ## OrRd 9 seq TRUE ## PuBu 9 seq TRUE ## PuBuGn 9 seq TRUE ## PuRd 9 seq TRUE ## Purples 9 seq TRUE ## RdPu 9 seq TRUE ## Reds 9 seq TRUE ## YlGn 9 seq TRUE ## YlGnBu 9 seq TRUE ## YlOrBr 9 seq TRUE ## YlOrRd 9 seq TRUE r p + scale_fill_distiller(palette = \"BrBG\") r p + scale_fill_distiller(palette = \"PiYG\") r p + scale_fill_distiller(palette = \"Accent\") r p + scale_fill_distiller(palette = \"PuBu\") 系统自带色盲友好viridis配色 r p + scale_fill_viridis_c(option = \"A\") r p + scale_fill_viridis_c(option = \"B\") r p + scale_fill_viridis_c(option = \"C\") r p + scale_fill_viridis_c(option = \"D\") r p + scale_fill_viridis_c(option = \"E\") r p + scale_fill_viridis_c(option = \"F\") r p + scale_fill_viridis_c(option = \"G\") r p + scale_fill_viridis_c(option = \"H\") r p + scale_fill_viridis_c(option = \"I\") ## Warning in viridisLite::viridis(n, alpha, begin, end, direction, option): Option ## 'I' does not exist. Defaulting to 'viridis'. scico程序包，科学的渐变色 ```r library(scico) scico::scico_palette_names() ``` ## [1] \"acton\" \"bam\" \"bamako\" \"bamO\" \"batlow\" \"batlowK\" \"batlowW\" ## [8] \"berlin\" \"bilbao\" \"broc\" \"brocO\" \"buda\" \"bukavu\" \"cork\" ## [15] \"corkO\" \"davos\" \"devon\" \"fes\" \"grayC\" \"hawaii\" \"imola\" ## [22] \"lajolla\" \"lapaz\" \"lisbon\" \"nuuk\" \"oleron\" \"oslo\" \"roma\" ## [29] \"romaO\" \"tofino\" \"tokyo\" \"turku\" \"vanimo\" \"vik\" \"vikO\" r scico::scale_fill_scico(palette = \"buda\") ## &lt;ScaleContinuous&gt; ## Range: ## Limits: 0 -- 1 r p + scale_fill_scico(palette = \"buda\") r p + scale_fill_scico(palette = \"batlow\") r scico_names &lt;- scico::scico_palette_names() scico_names ## [1] \"acton\" \"bam\" \"bamako\" \"bamO\" \"batlow\" \"batlowK\" \"batlowW\" ## [8] \"berlin\" \"bilbao\" \"broc\" \"brocO\" \"buda\" \"bukavu\" \"cork\" ## [15] \"corkO\" \"davos\" \"devon\" \"fes\" \"grayC\" \"hawaii\" \"imola\" ## [22] \"lajolla\" \"lapaz\" \"lisbon\" \"nuuk\" \"oleron\" \"oslo\" \"roma\" ## [29] \"romaO\" \"tofino\" \"tokyo\" \"turku\" \"vanimo\" \"vik\" \"vikO\" r p + scale_fill_scico(palette = scico_names[1]) r p + scale_fill_scico(palette = scico_names[2]) r p + scale_fill_scico(palette = scico_names[3]) r p + scale_fill_scico(palette = scico_names[4]) r p + scale_fill_scico(palette = scico_names[5]) r p + scale_fill_scico(palette = scico_names[6]) r p + scale_fill_scico(palette = scico_names[7]) r p + scale_fill_scico(palette = scico_names[8]) r p + scale_fill_scico(palette = scico_names[9]) r p + scale_fill_scico(palette = scico_names[10]) r p + scale_fill_scico(palette = scico_names[11]) r p + scale_fill_scico(palette = scico_names[12]) r p + scale_fill_scico(palette = scico_names[13]) r p + scale_fill_scico(palette = scico_names[14]) r p + scale_fill_scico(palette = scico_names[15]) r p + scale_fill_scico(palette = scico_names[16]) ## 连续变量-手动配色 颜色映射到连续变量 scale_color_gradient(low=..., high=..., na.value=) 用两种颜色形成梯度 scale_color_continuous(low=..., high=...) 同上 scale_color_gradient2(low=..., mid=..., high=...)用三种颜色形成梯度 r p + scale_fill_gradient(low = \"white\", high = \"black\", na.value = \"grey96\") scale_color_gradientn(colors=...) 用n种颜色形成梯度 heat.colors(8) terrain.colors(8) r p + scale_fill_gradientn(colors=heat.colors(8), na.value=\"white\") ## 颜色RGB码的转化 r rgb(34, 108, 224, max=255) ## [1] \"#226CE0\" ## 推荐阅读： 科技论文中颜色的误用 Crameri, F., Shephard, G. E., &amp; Heron, P. J. (2020). The misuse of colour in science communication. Nature communications, 11(1), 1-10. https://www.nature.com/articles/s41467-020-19160-7 如何配色 The Elements of Choosing Colors for Great Data Visualization in R http://www.sthda.com/english/wiki/the-elements-of-choosing-colors-for-great-data-visualization-in-r 配色工具 R package colortools https://rpubs.com/gaston/colortools 颜色使用需考虑什么 What to consider when choosing colors for data visualization https://blog.datawrapper.de/colors/ 检测配色是否色盲友好 HOW TO STIMULATE COLORBLINDNESS VISION IN R FIGURES https://www.datanovia.com/en/blog/how-to-stimulate-colorblindness-vision-in-r-figures/ 关于颜色的选择：定性vs定量，单渐变色vs双渐变色，分类vs不分类 https://blog.datawrapper.de/which-color-scale-to-use-in-data-vis/ ### 拼图程序包 cowplot r p1 r p2 ```r library(cowplot) cowplot::plot_grid(p1, p2) ``` r cowplot::plot_grid(p1, p2, p1, p2,ncol=2, labels=c(\"a\",\"b\",\"c\",\"d\")) r cowplot::plot_grid(p1, p2) r cowplot::plot_grid(p1, p2, ncol=1) r cowplot::plot_grid(p1, p2, labels = c(\"a\",\"b\")) r cowplot::plot_grid(p1, p2, rel_widths = c(1,2)) # 数据整理 ## 数据整理 ### 3个常用的程序包dplyr，tidyr，reshape2 Package | 常用函数 ————|——————————————– dplyr | select()，filter()，mutate()，arrange() |group_by()，summarise() | join()，%&gt;%（pipe运算符） tidyr | pivot_longer，pivot_wider() reshape2 | melt()（老但好用） ## dplyr名字的含义 https://github.com/tidyverse/dplyr/issues/1857 hadley commented on 26 May 2016 - The d is for dataframes, the plyr is to evoke pliers. Pronounce however you like. (kartiksubbarao?) - kartiksubbarao commented on 30 Oct 2017 The precursor to dplyr was called plyr. The ‘ply’ in plyr comes from an expansion/refining of the various “apply” functions in R as part of the “split-apply-combine” model/strategy. Here’s a good slideset that provides more insight into the plyr name: https://www.slideshare.net/hadley/plyr-one-data-analytic-strategy ## tidyverse大程序包 1. ggplot2，dplyr，tidyr等都是tidyverse系列的 2. 运行install.packages(\"tidyverse\")可以一并安装 ### tidyverse包括以下程序包： ## [1] \"broom\" \"cli\" \"crayon\" \"dbplyr\" ## [5] \"dplyr\" \"dtplyr\" \"forcats\" \"googledrive\" ## [9] \"googlesheets4\" \"ggplot2\" \"haven\" \"hms\" ## [13] \"httr\" \"jsonlite\" \"lubridate\" \"magrittr\" ## [17] \"modelr\" \"pillar\" \"purrr\" \"readr\" ## [21] \"readxl\" \"reprex\" \"rlang\" \"rstudioapi\" ## [25] \"rvest\" \"stringr\" \"tibble\" \"tidyr\" ## [29] \"xml2\" \"tidyverse\" ## 案例分析：美国贻贝观察数据 ### NOAA’s National Status and Trends### ### NS&amp;T is comprised of three nationwide programs, Benthic Surveillance, .red[Mussel Watch] and Bioeffects that are designed to describe the current status of, and detect changes in, the environmental quality of our nation’s .red[estuarine and coastal waters] through environmental monitoring, assessment and related research.### 数据来源：https://products.coastalscience.noaa.gov/collections/ltmonitoring/nsandt/ ### 初步了解数据 - 已从NOAA网站下载数据，将其命名为.red[“MusselWatch20170718.csv”] - 读取数据 r d0 &lt;- read.csv(\"data/MusselWatch20170718.csv\") - 多少行，多少列? r dim(d0) ## [1] 127743 16 有127743行，用excel处理会很棘手 - 各列的名称是什么？ r names(d0) ## [1] \"Study\" \"NST_Site\" \"General_Location\" ## [4] \"Specific_Location\" \"Sample_ID\" \"Latitude\" ## [7] \"Longitude\" \"Fiscal_Year\" \"Collection_Date\" ## [10] \"Matrix\" \"Scientific_Name\" \"Method\" ## [13] \"Parameter\" \"Value\" \"Qualifier\" ## [16] \"Unit\" ### 测定了哪些类型的样品？ r unique(d0$Matrix) ## [1] \"Sediment\" \"Water\" \"Fish Filet\" ## [4] \"Fish Liver\" \"Sediment Trap\" \"Nepheloid\" ## [7] \"Oyster\" \"Coral\" \"Mussel\" ## [10] \"Fish Muscle\" \"Clam\" \"Cockles\" ## [13] \"Conch\" \"Zebra Mussel Tissue\" \"Starfish\" ## [16] \"Flatfish\" \"Shrimp\" \"Fish\" ## [19] \"Lobster\" ### 测定了哪些污染物？ r unique(d0$Parameter) ## [1] \"Aluminum\" \"Antimony\" ## [3] \"Arsenic\" \"Cadmium\" ## [5] \"Chromium\" \"Copper\" ## [7] \"Iron\" \"Lead\" ## [9] \"Manganese\" \"Mercury\" ## [11] \"Nickel\" \"Selenium\" ## [13] \"Silver\" \"Tin\" ## [15] \"Zinc\" \"Silicon\" ## [17] \"Thallium\" \"Methyl Mercury\" ## [19] \"Aluminum - Units in Wet Weight\" \"Antimony - Units in Wet Weight\" ## [21] \"Arsenic - Units in Wet Weight\" \"Barium - Units in Wet Weight\" ## [23] \"Beryllium - Units in Wet Weight\" \"Cadmium - Units in Wet Weight\" ## [25] \"Chromium - Units in Wet Weight\" \"Cobalt - Units in Wet Weight\" ## [27] \"Copper - Units in Wet Weight\" \"Iron - Units in Wet Weight\" ## [29] \"Lead - Units in Wet Weight\" \"Lithium - Units in Wet Weight\" ## [31] \"Manganese - Units in Wet Weight\" \"Mercury - Units in Wet Weight\" ## [33] \"Nickel - Units in Wet Weight\" \"Selenium - Units in Wet Weight\" ## [35] \"Silver - Units in Wet Weight\" \"Thallium - Units in Wet Weight\" ## [37] \"Tin - Units in Wet Weight\" \"Uranium - Units in Wet Weight\" ## [39] \"Vanadium - Units in Wet Weight\" \"Zinc - Units in Wet Weight\" ### 数据的单位是什么？ r unique(d0$Unit) ## [1] \"micrograms per dry gram \" \"micrograms per wet gram\" 注意：有两种单位，后续分析时需小心，不能把不同单位的数据混在一起分析 ## 提出问题 ### 1. 牡蛎和贻贝谁的Cd浓度高？ ### 2. Zn浓度高的牡蛎，是否Cd浓度也高？ 2.38 目前的数据存在哪些问题： 2.38.1 1. 数据太大，冗余信息过多 – 2.38.2 2. 存在干重、湿重两种不同的单位 2.39 整理数据：用select()筛选数据的特定列 2.39.1 使用“列名”来选择列 library(dplyr) d &lt;- d0 %&gt;% select(Fiscal_Year, Matrix, Scientific_Name, Parameter, Value, Unit) 检查一下结果是否符合预期： names(d) ## [1] &quot;Fiscal_Year&quot; &quot;Matrix&quot; &quot;Scientific_Name&quot; &quot;Parameter&quot; ## [5] &quot;Value&quot; &quot;Unit&quot; 2.39.2 也可以用“列号”进行选择 选择数据d0的第8， 10， 14， 16列，存入d1 d1 &lt;- d0 %&gt;% select(8, 10, 14, 16) 删去数据d0的第1-7列，第9，15列，存入d2 d2 &lt;- d0 %&gt;% select(-c(1:7, 9, 15)) 2.40 数据整理： 用filter()筛选数据的特定行 2.40.1 筛选出牡蛎和贻贝的数据 d_oy.mu &lt;- d %&gt;% filter(Matrix %in% c(&quot;Oyster&quot;, &quot;Mussel&quot;)) #&lt;&lt; 注意：筛选多个变量用”%in%“，筛选单一变量用”==“。 2.40.2 检查一下新的数据 dim(d_oy.mu) #行数大为精简 ## [1] 49360 6 unique(d_oy.mu$Matrix) #只剩下Oyster和Mussel ## [1] &quot;Oyster&quot; &quot;Mussel&quot; 2.40.3 再次查看数据的单位 unique(d_oy.mu$Unit) ## [1] &quot;micrograms per dry gram &quot; 数据全部是基于干重的了，可以解除警报 2.40.4 也可以用base R的subset()筛选数据 代码如下： d_oy_2 &lt;- subset(d, Matrix==&quot;Oyster&quot;) unique(d_oy_2$Matrix) ## [1] &quot;Oyster&quot; 此操作简洁快速，适用于筛选步骤不多的场合 2.41 注意区分filter()和select() filter() 用于选择特定的行（即样品、观察) select() 用于选择特定的列（即变量) 2.41.1 筛选出Cd的数据 d_oy.mu_Cd &lt;- d_oy.mu %&gt;% filter( Parameter == &quot;Cadmium&quot;) 再检查数据 dim(d_oy.mu_Cd) ## [1] 3579 6 unique(d_oy.mu_Cd$Parameter) ## [1] &quot;Cadmium&quot; unique(d_oy.mu_Cd$Scientific_Name) ## [1] &quot;Crassostrea virginica&quot; &quot;Mytilus edulis&quot; ## [3] &quot;Mytilus species&quot; &quot;Ostrea sandvicensis&quot; ## [5] &quot;Geukensia demissa&quot; &quot;Crassostrea rhizophorae&quot; ## [7] &quot;Crassostrea gigas&quot; 发现牡蛎、贻贝共有7个物种，我们把问题1细化到物种 2.41.2 可以作个图看看数据了 作散点图 library(ggplot2) ggplot(d_oy.mu_Cd, aes(Scientific_Name, Value))+ geom_point() ###修改成对数坐标### 当数据之间差异很大时，可以考虑用对数坐标，使数据均匀分散开 ggplot(d_oy.mu_Cd, aes(Scientific_Name, Value))+ geom_point()+ scale_y_log10() ## Warning: Transformation introduced infinite values in continuous y-axis 2.41.3 去掉只有2个数据点的物种 d_Cd &lt;- d_oy.mu_Cd %&gt;% filter(Scientific_Name != &quot;Crassostrea gigas&quot;) ggplot(d_Cd, aes(Scientific_Name, Value))+ geom_point()+ scale_y_log10()+ theme(axis.text.x = element_text(angle=20, hjust=1)) #x轴上名称太长，旋转20°以便显示 ## Warning: Transformation introduced infinite values in continuous y-axis 2.41.4 研究问题1：牡蛎、贻贝，谁的Cd浓度高？ 用不同颜色区分牡蛎和贻贝 ggplot(d_Cd, aes(Scientific_Name, Value, color=Matrix))+ geom_point()+ scale_y_log10()+ theme(axis.text.x = element_text(angle=20, hjust=1)) ## Warning: Transformation introduced infinite values in continuous y-axis 2.41.5 按中位值排序 原先的顺序无规律，不便于传达信息 ggplot(d_Cd, aes(reorder(Scientific_Name, -Value, median), Value, color=Matrix))+ geom_point()+ scale_y_log10()+ theme(axis.text.x = element_text(angle=20, hjust=1)) ## Warning: Transformation introduced infinite values in continuous y-axis 2.41.6 按中位值排序 用到了reorder()函数按照中位数降序排列，你可以reorder()看看这个函数的用法，思考：按照均值升序如何排列？ 还有另外一种更容易理解的手动排序方法，即从图上观察高低顺序，然后按顺序排列。这种方法很常用。代码如下： d_Cd$Scientific_Name &lt;- factor( d_Cd$Scientific_Name, levels = c( &quot;Mytilus species&quot;, &quot;Crassostrea virginica&quot;, &quot;Mytilus edulis&quot;, &quot;Geukensia demissa&quot;, &quot;Ostrea sandvicensis&quot;, &quot;Crassostrea rhizophorae&quot;)) 2.41.7 修饰细节 数据点较多时，可以用小提琴图展现数据的分布，用抖动点充分展现原始数据 颜色的使用考虑色盲读者，考虑黑白打印 library(ggbeeswarm) #作蜂群图需要 ggplot(d_Cd, aes(reorder(Scientific_Name, -Value, median), Value, color=Matrix))+ theme_bw()+ geom_violin(draw_quantiles = 0.5)+ #小提琴图 #geom_beeswarm(cex = 0.4, shape = &quot;.&quot;, size = 3, alpha = 0.5)+ #蜂群图 geom_jitter(shape=&quot;.&quot;, width = 0.2)+ scale_y_log10()+ annotation_logticks(sides=&quot;l&quot;)+ #对数刻度 labs(x=NULL, y=expression(&quot;Cd concentration (&quot;*mu*g~g^&quot;-1&quot;*&quot;dry wt.)&quot;), color=NULL)+ theme(axis.text.x=element_text(face=&quot;italic&quot;, angle=20, hjust=1))+ #x轴斜体，转角 theme(legend.position=c(1,1), legend.justification = c(1,1), legend.background = element_blank(), legend.key = element_blank())+ #调整图例位置、背景 theme(panel.grid.minor = element_blank())+ #去掉次要网格 scale_color_viridis_d(begin=0, end=0.6) #颜色选择，色盲友好 ## Warning: Transformation introduced infinite values in continuous y-axis ## Transformation introduced infinite values in continuous y-axis ## Warning: Removed 5 rows containing non-finite values (stat_ydensity). ## Warning: Removed 5 rows containing missing values (geom_point). 问题1得到回答了吗？ ###汇总：把数据整理和画图的全部操作串联 d0 %&gt;% select(Fiscal_Year, Matrix, Scientific_Name, Parameter, Value, Unit) %&gt;% filter(Matrix %in% c(&quot;Oyster&quot;, &quot;Mussel&quot;)) %&gt;% filter(Parameter == &quot;Cadmium&quot;) %&gt;% filter(Scientific_Name != &quot;Crassostrea gigas&quot;) %&gt;% ggplot(aes(reorder(Scientific_Name, -Value, median), Value, color=Matrix))+ #注意这步，省略了data指定，默认使用上游输送来的数据 theme_bw()+ geom_violin(draw_quantiles = 0.5)+ #小提琴图 #geom_beeswarm(cex = 0.4, shape = &quot;.&quot;, size = 3, alpha = 0.5)+ #蜂群图 scale_y_log10()+ annotation_logticks(sides=&quot;l&quot;)+ #对数刻度 labs(x=NULL, y=expression(&quot;Cd concentration (&quot;*mu*g~g^&quot;-1&quot;*&quot;dry wt.)&quot;), color=NULL)+ theme(axis.text.x=element_text(face=&quot;italic&quot;, angle=20, hjust=1))+ #x轴斜体，转角 theme(legend.position=c(1,1), legend.justification = c(1,1), legend.background = element_blank(), legend.key = element_blank())+ #调整图例位置、背景 theme(panel.grid.minor = element_blank())+ #去掉次要网格 scale_color_viridis_d(begin=0, end=0.6) #颜色选择，色盲友好 ## Warning: Transformation introduced infinite values in continuous y-axis ## Warning: Removed 5 rows containing non-finite values (stat_ydensity). 2.42 用group_by和summarise分组计算均值、标准差 按物种名（Scientific_Name）分组，计算浓度（Value）的均值（mean）和标准差（sd） d_Cd_mean &lt;- d_Cd %&gt;% group_by(Scientific_Name) %&gt;% #&lt;&lt; summarise(mean = mean(Value), sd = sd(Value)) #&lt;&lt; – 查看计算结果 d_Cd_mean ## # A tibble: 6 × 3 ## Scientific_Name mean sd ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mytilus species 3.61 2.37 ## 2 Crassostrea virginica 3.65 2.81 ## 3 Mytilus edulis 1.69 1.52 ## 4 Geukensia demissa 0.980 0.765 ## 5 Ostrea sandvicensis 0.625 0.475 ## 6 Crassostrea rhizophorae 0.527 0.237 以上结果可用于作图，也可用于表格 2.43 研究问题2： 2.43.1 Zn浓度高的牡蛎，是否Cd浓度也高？ 再来观察数据 Sample_ID可以作为样品配对的依据 names(d0) ## [1] &quot;Study&quot; &quot;NST_Site&quot; &quot;General_Location&quot; ## [4] &quot;Specific_Location&quot; &quot;Sample_ID&quot; &quot;Latitude&quot; ## [7] &quot;Longitude&quot; &quot;Fiscal_Year&quot; &quot;Collection_Date&quot; ## [10] &quot;Matrix&quot; &quot;Scientific_Name&quot; &quot;Method&quot; ## [13] &quot;Parameter&quot; &quot;Value&quot; &quot;Qualifier&quot; ## [16] &quot;Unit&quot; 2.43.2 整理数据 选择这些列：Sample_ID, Fiscal_Year, Matrix, Scientific_Name, Parameter, Value, Unit 筛选出Oyster的数据 筛选出Cadmium和Zinc的数据 删去物种Crassostrea gigas的数据（只有两条数据，缺乏代表性） d_oy_Cd.Zn &lt;- d0 %&gt;% select(Sample_ID, Fiscal_Year, Matrix, Scientific_Name, Parameter, Value, Unit) %&gt;% filter(Matrix == &quot;Oyster&quot; &amp; Parameter %in% c(&quot;Cadmium&quot;, &quot;Zinc&quot;) &amp; Scientific_Name != &quot;Crassostrea gigas&quot;) 2.43.3 查看整理好的数据 有哪些列？ names(d_oy_Cd.Zn) ## [1] &quot;Sample_ID&quot; &quot;Fiscal_Year&quot; &quot;Matrix&quot; &quot;Scientific_Name&quot; ## [5] &quot;Parameter&quot; &quot;Value&quot; &quot;Unit&quot; 测定了哪些污染物？ unique(d_oy_Cd.Zn$Parameter) ## [1] &quot;Cadmium&quot; &quot;Zinc&quot; 2.43.4 把数据切分成Cd数据、Zn数据 用subset()切出Cd的数据 d_oy_Cd &lt;- subset(d_oy_Cd.Zn, Parameter==&quot;Cadmium&quot;) dim(d_oy_Cd) # 1718条数据 ## [1] 1718 7 用subset()切出Zn的数据 d_oy_Zn &lt;- subset(d_oy_Cd.Zn, Parameter==&quot;Zinc&quot;) dim(d_oy_Zn) # 也是1718条数据 ## [1] 1718 7 两种金属的数据都是1718条，很可能是一一对应的。这需要一一核对两组数据的Sample_ID才能确定，那是很大的工作量。这种情况下，join系列函数就派上用场了。 2.43.5 运用inner_join()合并两套数据 当两组数据的Sample_ID相同时，则合并在同一行 d_oy &lt;- inner_join(d_oy_Cd, d_oy_Zn, by = &quot;Sample_ID&quot;, suffix = c(&quot;.Cd&quot;, &quot;.Zn&quot;)) 查看一下数据, 还是1718列，1个也没丢失，说明两组数据确实一一对应 dim(d_oy) ## [1] 1718 13 names(d_oy) ## [1] &quot;Sample_ID&quot; &quot;Fiscal_Year.Cd&quot; &quot;Matrix.Cd&quot; ## [4] &quot;Scientific_Name.Cd&quot; &quot;Parameter.Cd&quot; &quot;Value.Cd&quot; ## [7] &quot;Unit.Cd&quot; &quot;Fiscal_Year.Zn&quot; &quot;Matrix.Zn&quot; ## [10] &quot;Scientific_Name.Zn&quot; &quot;Parameter.Zn&quot; &quot;Value.Zn&quot; ## [13] &quot;Unit.Zn&quot; 2.43.6 join系列函数 inner_join() return all rows from x where there are matching values in y, and all columns from x and y. If there are multiple matches between x and y, all combination of the matches are returned. left_join() return all rows from x, and all columns from x and y. Rows in x with no match in y will have NA values in the new columns. If there are multiple matches between x and y, all combinations of the matches are returned. right_join() return all rows from y, and all columns from x and y. Rows in y with no match in x will have NA values in the new columns. If there are multiple matches between x and y, all combinations of the matches are returned. full_join() return all rows and all columns from both x and y. Where there are not matching values, returns NA for the one missing. 阅读： https://dplyr.tidyverse.org/reference/join.html 2.43.7 作散点图初步了解数据 ggplot(d_oy, aes(Value.Cd, Value.Zn))+ geom_point() 2.43.8 使用双对数坐标 ggplot(d_oy, aes(Value.Cd, Value.Zn))+ geom_point()+ scale_x_log10()+ scale_y_log10() ## Warning: Transformation introduced infinite values in continuous x-axis 原始数据里有“0”值，取对数后产生负无穷大（-Inf）.作图时会产生警告信息，但不妨碍出图。在坐标轴上可以看到这些点，他们露出了一半。 2.43.9 按不同物种分面作图 ggplot(d_oy, aes(Value.Cd, Value.Zn))+ geom_point()+ scale_x_log10()+ scale_y_log10()+ facet_wrap(~Scientific_Name.Zn) # 用Scientific_Name.Cd也一样 ## Warning: Transformation introduced infinite values in continuous x-axis - 大部分数据都是关于Crassostrea virginica这种牡蛎的 2.43.10 添加拟合线，帮助判断趋势 ggplot(d_oy, aes(Value.Cd, Value.Zn))+ geom_point()+ scale_x_log10()+ scale_y_log10()+ facet_wrap(~Scientific_Name.Zn)+ geom_smooth(method=&quot;lm&quot;) ## Warning: Transformation introduced infinite values in continuous x-axis ## Transformation introduced infinite values in continuous x-axis ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 3 rows containing non-finite values (stat_smooth). - 大部分数据都是关于Crassostrea virginica这种牡蛎的 2.43.11 美化一下 ggplot(d_oy, aes(Value.Cd, Value.Zn, color= Scientific_Name.Zn))+ theme_bw()+ geom_point(shape=16, size=1/3, alpha=0.5)+ scale_x_log10()+ scale_y_log10()+ annotation_logticks(sides=&quot;bl&quot;)+ facet_wrap(~Scientific_Name.Zn)+ geom_smooth(method=&quot;lm&quot;, color=&quot;black&quot;)+ labs(x=expression(&quot;Cd concentration (&quot;*mu*g~g^&quot;-1&quot;*&quot;)&quot;), y=expression(&quot;Zn concentration (&quot;*mu*g~g^&quot;-1&quot;*&quot;)&quot;))+ guides(color=&quot;none&quot;)+ theme(strip.text = element_text(face=&quot;italic&quot;))+ #横幅上物种名用斜体 scale_color_viridis_d(end=0.6) ## Warning: Transformation introduced infinite values in continuous x-axis ## Transformation introduced infinite values in continuous x-axis ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 3 rows containing non-finite values (stat_smooth). 2.43.12 成品 问题2得到回答了吗？ 2.44 要点小结 函数 功能 fliter() 根据其值筛选行 select() 根据其名筛选列 arrange() 改变行的排序，从低到高排 arrange(desc()) … 从高到低排 mutate() 基于现有变量进行计算，增加新的变量（类比excel里的C1=A1*B1) summarize() 计算统计量（如均值、方差、中位数） pivot_longer() 宽数据变长数据 pivot_wider() 长数据变宽数据 melt() 宽数据变长数据 left_join() 合并数据，保留左侧全部的，右侧没有对应值的则填充NA inner_join() 合并数据，保留共有的 … …. 2.45 要点小结 2.45.1 “%&gt;%”运算符 读作pipe，可以翻译成管道（很形象） pipe将多个操作串联起来，上一操作的结果成为下一操作的对象 功能类似ggplot里的”+“号 2.46 练习 分析不同年份贻贝的Cu浓度，看看有何趋势？ 自己观察数据，提出问题，并通过数据分析去回答。 2.47 阅读： Overview of dplyr https://dplyr.tidyverse.org/index.html Introduction to dplyr https://dplyr.tidyverse.org/articles/dplyr.html "],["04-lubridate.html", "Chapter 3 lubridate处理时间数据 3.1 时间格式转化 3.2 时间信息提取 3.3 提取日期-时间数据中的信息 3.4 时区 3.5 时区 3.6 时间计算 3.7 时间数据可视化 3.8 ?strptime查看日期时间格式 3.9 合并四年数据用于分析 3.10 数据整理 3.11 缺哪天的数据？ 3.12 总体趋势：厦门AQI的4年趋势 3.13 总体趋势：一并查看6项指标 3.14 细看季节趋势：PM2.5 3.15 细看各个月份：各月份的PM2.5概率密度分布 3.16 对比各月份与总体的PM2.5概率密度分布 3.17 对比各月份与总体的PM2.5概率密度分布 3.18 季节趋势：总览全部参数 3.19 工作日-周末趋势：PM2.5 3.20 昼夜趋势：臭氧 3.21 昼夜趋势：臭氧 3.22 昼夜趋势：臭氧 3.23 拓展阅读", " Chapter 3 lubridate处理时间数据 加载程序包 library(tidyverse) #作图 library(readxl) #读取excel文件 library(lubridate) #处理时间数据 3.1 时间格式转化 3.1.1 字符串转化为日期（Date）格式 a &lt;- &quot;20220318&quot; # a是字符格式 class(a) ## [1] &quot;character&quot; b &lt;- ymd(a) #将a转化为日期格式 class(b) ## [1] &quot;Date&quot; # ymd，ydm，mdy，myd等系列函数，`?ymd`查看 mdy(&quot;03/18/2022&quot;) ## [1] &quot;2022-03-18&quot; 日期格式自由，均能正确转化 ymd(&quot;2022/03/18&quot;) ## [1] &quot;2022-03-18&quot; x &lt;- c(20090101, &quot;2009-01-02&quot;, &quot;2009 01 03&quot;, &quot;2009-1-4&quot;, &quot;2009-1, 5&quot;, &quot;Created on 2009 1 6&quot;, &quot;200901 !!! 07&quot;) ymd(x) ## [1] &quot;2009-01-01&quot; &quot;2009-01-02&quot; &quot;2009-01-03&quot; &quot;2009-01-04&quot; &quot;2009-01-05&quot; ## [6] &quot;2009-01-06&quot; &quot;2009-01-07&quot; 3.1.2 字符串转化为日期（Date）格式 以下两个函数对输入格式有较严格要求 as.Date(&quot;2022-03-12&quot;) # 分隔号- ## [1] &quot;2022-03-12&quot; as.Date(&quot;2022/12/03&quot;) #分隔号/ ## [1] &quot;2022-12-03&quot; date(&quot;2022-03-18&quot;) # 分隔号- ## [1] &quot;2022-03-18&quot; date(&quot;2022/03/18&quot;) #分隔号/ ## [1] &quot;2022-03-18&quot; 3.1.3 字符串转化为日期-时间（date-time）格式 ymd_hms(&quot;2011-06-05 12:00:00&quot;) #年月日 时分秒 ## [1] &quot;2011-06-05 12:00:00 UTC&quot; ymd_hm(&quot;2011-06-05 12:23&quot;) #年月日 时分；秒自动设置为0 ## [1] &quot;2011-06-05 12:23:00 UTC&quot; ymd_h(&quot;2011-06-05 12&quot;) #年月日 时；分秒自动设置为0 ## [1] &quot;2011-06-05 12:00:00 UTC&quot; 3.2 时间信息提取 3.2.1 提取日期数据中的信息 today() #今天的日期 ## [1] &quot;2022-06-07&quot; x &lt;- today() year(x) # 哪年？ ## [1] 2022 month(x) #哪月？ ## [1] 6 day(x) #哪日？ ## [1] 7 wday(x) #一个星期中的第几天？（默认星期天为第1天） ## [1] 3 wday(x, week_start = 1) #一个星期中的第几天？以星期一为第1天 ## [1] 2 3.3 提取日期-时间数据中的信息 now() #现在时刻 ## [1] &quot;2022-06-07 08:02:31 CST&quot; Sys.time() #电脑系统的现在时刻 ## [1] &quot;2022-06-07 08:02:31 CST&quot; y &lt;- now() hour(y) #几时？ ## [1] 8 minute(y) #几分？ ## [1] 2 second(y) #几秒？ ## [1] 31.29709 wday(y, week_start = 1, label = T ) #星期几？（文字表示） ## [1] Tue ## Levels: Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat &lt; Sun yday(y) #一年中的第几天？ ## [1] 158 week(y) #一年中的第几个星期？ ## [1] 23 3.4 时区 关于时区设置：?locales查询 关于时区名称，查看维基百科： https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Sys.timezone() #所在时区：亚洲/上海，即北京时间 ## [1] &quot;Asia/Shanghai&quot; OlsonNames() #查询所有时区名称，该数据库由David Olson创立 ## [1] &quot;Africa/Abidjan&quot; &quot;Africa/Accra&quot; ## [3] &quot;Africa/Addis_Ababa&quot; &quot;Africa/Algiers&quot; ## [5] &quot;Africa/Asmara&quot; &quot;Africa/Asmera&quot; ## [7] &quot;Africa/Bamako&quot; &quot;Africa/Bangui&quot; ## [9] &quot;Africa/Banjul&quot; &quot;Africa/Bissau&quot; ## [11] &quot;Africa/Blantyre&quot; &quot;Africa/Brazzaville&quot; ## [13] &quot;Africa/Bujumbura&quot; &quot;Africa/Cairo&quot; ## [15] &quot;Africa/Casablanca&quot; &quot;Africa/Ceuta&quot; ## [17] &quot;Africa/Conakry&quot; &quot;Africa/Dakar&quot; ## [19] &quot;Africa/Dar_es_Salaam&quot; &quot;Africa/Djibouti&quot; ## [21] &quot;Africa/Douala&quot; &quot;Africa/El_Aaiun&quot; ## [23] &quot;Africa/Freetown&quot; &quot;Africa/Gaborone&quot; ## [25] &quot;Africa/Harare&quot; &quot;Africa/Johannesburg&quot; ## [27] &quot;Africa/Juba&quot; &quot;Africa/Kampala&quot; ## [29] &quot;Africa/Khartoum&quot; &quot;Africa/Kigali&quot; ## [31] &quot;Africa/Kinshasa&quot; &quot;Africa/Lagos&quot; ## [33] &quot;Africa/Libreville&quot; &quot;Africa/Lome&quot; ## [35] &quot;Africa/Luanda&quot; &quot;Africa/Lubumbashi&quot; ## [37] &quot;Africa/Lusaka&quot; &quot;Africa/Malabo&quot; ## [39] &quot;Africa/Maputo&quot; &quot;Africa/Maseru&quot; ## [41] &quot;Africa/Mbabane&quot; &quot;Africa/Mogadishu&quot; ## [43] &quot;Africa/Monrovia&quot; &quot;Africa/Nairobi&quot; ## [45] &quot;Africa/Ndjamena&quot; &quot;Africa/Niamey&quot; ## [47] &quot;Africa/Nouakchott&quot; &quot;Africa/Ouagadougou&quot; ## [49] &quot;Africa/Porto-Novo&quot; &quot;Africa/Sao_Tome&quot; ## [51] &quot;Africa/Timbuktu&quot; &quot;Africa/Tripoli&quot; ## [53] &quot;Africa/Tunis&quot; &quot;Africa/Windhoek&quot; ## [55] &quot;America/Adak&quot; &quot;America/Anchorage&quot; ## [57] &quot;America/Anguilla&quot; &quot;America/Antigua&quot; ## [59] &quot;America/Araguaina&quot; &quot;America/Argentina/Buenos_Aires&quot; ## [61] &quot;America/Argentina/Catamarca&quot; &quot;America/Argentina/ComodRivadavia&quot; ## [63] &quot;America/Argentina/Cordoba&quot; &quot;America/Argentina/Jujuy&quot; ## [65] &quot;America/Argentina/La_Rioja&quot; &quot;America/Argentina/Mendoza&quot; ## [67] &quot;America/Argentina/Rio_Gallegos&quot; &quot;America/Argentina/Salta&quot; ## [69] &quot;America/Argentina/San_Juan&quot; &quot;America/Argentina/San_Luis&quot; ## [71] &quot;America/Argentina/Tucuman&quot; &quot;America/Argentina/Ushuaia&quot; ## [73] &quot;America/Aruba&quot; &quot;America/Asuncion&quot; ## [75] &quot;America/Atikokan&quot; &quot;America/Atka&quot; ## [77] &quot;America/Bahia&quot; &quot;America/Bahia_Banderas&quot; ## [79] &quot;America/Barbados&quot; &quot;America/Belem&quot; ## [81] &quot;America/Belize&quot; &quot;America/Blanc-Sablon&quot; ## [83] &quot;America/Boa_Vista&quot; &quot;America/Bogota&quot; ## [85] &quot;America/Boise&quot; &quot;America/Buenos_Aires&quot; ## [87] &quot;America/Cambridge_Bay&quot; &quot;America/Campo_Grande&quot; ## [89] &quot;America/Cancun&quot; &quot;America/Caracas&quot; ## [91] &quot;America/Catamarca&quot; &quot;America/Cayenne&quot; ## [93] &quot;America/Cayman&quot; &quot;America/Chicago&quot; ## [95] &quot;America/Chihuahua&quot; &quot;America/Coral_Harbour&quot; ## [97] &quot;America/Cordoba&quot; &quot;America/Costa_Rica&quot; ## [99] &quot;America/Creston&quot; &quot;America/Cuiaba&quot; ## [101] &quot;America/Curacao&quot; &quot;America/Danmarkshavn&quot; ## [103] &quot;America/Dawson&quot; &quot;America/Dawson_Creek&quot; ## [105] &quot;America/Denver&quot; &quot;America/Detroit&quot; ## [107] &quot;America/Dominica&quot; &quot;America/Edmonton&quot; ## [109] &quot;America/Eirunepe&quot; &quot;America/El_Salvador&quot; ## [111] &quot;America/Ensenada&quot; &quot;America/Fort_Nelson&quot; ## [113] &quot;America/Fort_Wayne&quot; &quot;America/Fortaleza&quot; ## [115] &quot;America/Glace_Bay&quot; &quot;America/Godthab&quot; ## [117] &quot;America/Goose_Bay&quot; &quot;America/Grand_Turk&quot; ## [119] &quot;America/Grenada&quot; &quot;America/Guadeloupe&quot; ## [121] &quot;America/Guatemala&quot; &quot;America/Guayaquil&quot; ## [123] &quot;America/Guyana&quot; &quot;America/Halifax&quot; ## [125] &quot;America/Havana&quot; &quot;America/Hermosillo&quot; ## [127] &quot;America/Indiana/Indianapolis&quot; &quot;America/Indiana/Knox&quot; ## [129] &quot;America/Indiana/Marengo&quot; &quot;America/Indiana/Petersburg&quot; ## [131] &quot;America/Indiana/Tell_City&quot; &quot;America/Indiana/Vevay&quot; ## [133] &quot;America/Indiana/Vincennes&quot; &quot;America/Indiana/Winamac&quot; ## [135] &quot;America/Indianapolis&quot; &quot;America/Inuvik&quot; ## [137] &quot;America/Iqaluit&quot; &quot;America/Jamaica&quot; ## [139] &quot;America/Jujuy&quot; &quot;America/Juneau&quot; ## [141] &quot;America/Kentucky/Louisville&quot; &quot;America/Kentucky/Monticello&quot; ## [143] &quot;America/Knox_IN&quot; &quot;America/Kralendijk&quot; ## [145] &quot;America/La_Paz&quot; &quot;America/Lima&quot; ## [147] &quot;America/Los_Angeles&quot; &quot;America/Louisville&quot; ## [149] &quot;America/Lower_Princes&quot; &quot;America/Maceio&quot; ## [151] &quot;America/Managua&quot; &quot;America/Manaus&quot; ## [153] &quot;America/Marigot&quot; &quot;America/Martinique&quot; ## [155] &quot;America/Matamoros&quot; &quot;America/Mazatlan&quot; ## [157] &quot;America/Mendoza&quot; &quot;America/Menominee&quot; ## [159] &quot;America/Merida&quot; &quot;America/Metlakatla&quot; ## [161] &quot;America/Mexico_City&quot; &quot;America/Miquelon&quot; ## [163] &quot;America/Moncton&quot; &quot;America/Monterrey&quot; ## [165] &quot;America/Montevideo&quot; &quot;America/Montreal&quot; ## [167] &quot;America/Montserrat&quot; &quot;America/Nassau&quot; ## [169] &quot;America/New_York&quot; &quot;America/Nipigon&quot; ## [171] &quot;America/Nome&quot; &quot;America/Noronha&quot; ## [173] &quot;America/North_Dakota/Beulah&quot; &quot;America/North_Dakota/Center&quot; ## [175] &quot;America/North_Dakota/New_Salem&quot; &quot;America/Nuuk&quot; ## [177] &quot;America/Ojinaga&quot; &quot;America/Panama&quot; ## [179] &quot;America/Pangnirtung&quot; &quot;America/Paramaribo&quot; ## [181] &quot;America/Phoenix&quot; &quot;America/Port_of_Spain&quot; ## [183] &quot;America/Port-au-Prince&quot; &quot;America/Porto_Acre&quot; ## [185] &quot;America/Porto_Velho&quot; &quot;America/Puerto_Rico&quot; ## [187] &quot;America/Punta_Arenas&quot; &quot;America/Rainy_River&quot; ## [189] &quot;America/Rankin_Inlet&quot; &quot;America/Recife&quot; ## [191] &quot;America/Regina&quot; &quot;America/Resolute&quot; ## [193] &quot;America/Rio_Branco&quot; &quot;America/Rosario&quot; ## [195] &quot;America/Santa_Isabel&quot; &quot;America/Santarem&quot; ## [197] &quot;America/Santiago&quot; &quot;America/Santo_Domingo&quot; ## [199] &quot;America/Sao_Paulo&quot; &quot;America/Scoresbysund&quot; ## [201] &quot;America/Shiprock&quot; &quot;America/Sitka&quot; ## [203] &quot;America/St_Barthelemy&quot; &quot;America/St_Johns&quot; ## [205] &quot;America/St_Kitts&quot; &quot;America/St_Lucia&quot; ## [207] &quot;America/St_Thomas&quot; &quot;America/St_Vincent&quot; ## [209] &quot;America/Swift_Current&quot; &quot;America/Tegucigalpa&quot; ## [211] &quot;America/Thule&quot; &quot;America/Thunder_Bay&quot; ## [213] &quot;America/Tijuana&quot; &quot;America/Toronto&quot; ## [215] &quot;America/Tortola&quot; &quot;America/Vancouver&quot; ## [217] &quot;America/Virgin&quot; &quot;America/Whitehorse&quot; ## [219] &quot;America/Winnipeg&quot; &quot;America/Yakutat&quot; ## [221] &quot;America/Yellowknife&quot; &quot;Antarctica/Casey&quot; ## [223] &quot;Antarctica/Davis&quot; &quot;Antarctica/DumontDUrville&quot; ## [225] &quot;Antarctica/Macquarie&quot; &quot;Antarctica/Mawson&quot; ## [227] &quot;Antarctica/McMurdo&quot; &quot;Antarctica/Palmer&quot; ## [229] &quot;Antarctica/Rothera&quot; &quot;Antarctica/South_Pole&quot; ## [231] &quot;Antarctica/Syowa&quot; &quot;Antarctica/Troll&quot; ## [233] &quot;Antarctica/Vostok&quot; &quot;Arctic/Longyearbyen&quot; ## [235] &quot;Asia/Aden&quot; &quot;Asia/Almaty&quot; ## [237] &quot;Asia/Amman&quot; &quot;Asia/Anadyr&quot; ## [239] &quot;Asia/Aqtau&quot; &quot;Asia/Aqtobe&quot; ## [241] &quot;Asia/Ashgabat&quot; &quot;Asia/Ashkhabad&quot; ## [243] &quot;Asia/Atyrau&quot; &quot;Asia/Baghdad&quot; ## [245] &quot;Asia/Bahrain&quot; &quot;Asia/Baku&quot; ## [247] &quot;Asia/Bangkok&quot; &quot;Asia/Barnaul&quot; ## [249] &quot;Asia/Beirut&quot; &quot;Asia/Bishkek&quot; ## [251] &quot;Asia/Brunei&quot; &quot;Asia/Calcutta&quot; ## [253] &quot;Asia/Chita&quot; &quot;Asia/Choibalsan&quot; ## [255] &quot;Asia/Chongqing&quot; &quot;Asia/Chungking&quot; ## [257] &quot;Asia/Colombo&quot; &quot;Asia/Dacca&quot; ## [259] &quot;Asia/Damascus&quot; &quot;Asia/Dhaka&quot; ## [261] &quot;Asia/Dili&quot; &quot;Asia/Dubai&quot; ## [263] &quot;Asia/Dushanbe&quot; &quot;Asia/Famagusta&quot; ## [265] &quot;Asia/Gaza&quot; &quot;Asia/Harbin&quot; ## [267] &quot;Asia/Hebron&quot; &quot;Asia/Ho_Chi_Minh&quot; ## [269] &quot;Asia/Hong_Kong&quot; &quot;Asia/Hovd&quot; ## [271] &quot;Asia/Irkutsk&quot; &quot;Asia/Istanbul&quot; ## [273] &quot;Asia/Jakarta&quot; &quot;Asia/Jayapura&quot; ## [275] &quot;Asia/Jerusalem&quot; &quot;Asia/Kabul&quot; ## [277] &quot;Asia/Kamchatka&quot; &quot;Asia/Karachi&quot; ## [279] &quot;Asia/Kashgar&quot; &quot;Asia/Kathmandu&quot; ## [281] &quot;Asia/Katmandu&quot; &quot;Asia/Khandyga&quot; ## [283] &quot;Asia/Kolkata&quot; &quot;Asia/Krasnoyarsk&quot; ## [285] &quot;Asia/Kuala_Lumpur&quot; &quot;Asia/Kuching&quot; ## [287] &quot;Asia/Kuwait&quot; &quot;Asia/Macao&quot; ## [289] &quot;Asia/Macau&quot; &quot;Asia/Magadan&quot; ## [291] &quot;Asia/Makassar&quot; &quot;Asia/Manila&quot; ## [293] &quot;Asia/Muscat&quot; &quot;Asia/Nicosia&quot; ## [295] &quot;Asia/Novokuznetsk&quot; &quot;Asia/Novosibirsk&quot; ## [297] &quot;Asia/Omsk&quot; &quot;Asia/Oral&quot; ## [299] &quot;Asia/Phnom_Penh&quot; &quot;Asia/Pontianak&quot; ## [301] &quot;Asia/Pyongyang&quot; &quot;Asia/Qatar&quot; ## [303] &quot;Asia/Qostanay&quot; &quot;Asia/Qyzylorda&quot; ## [305] &quot;Asia/Rangoon&quot; &quot;Asia/Riyadh&quot; ## [307] &quot;Asia/Saigon&quot; &quot;Asia/Sakhalin&quot; ## [309] &quot;Asia/Samarkand&quot; &quot;Asia/Seoul&quot; ## [311] &quot;Asia/Shanghai&quot; &quot;Asia/Singapore&quot; ## [313] &quot;Asia/Srednekolymsk&quot; &quot;Asia/Taipei&quot; ## [315] &quot;Asia/Tashkent&quot; &quot;Asia/Tbilisi&quot; ## [317] &quot;Asia/Tehran&quot; &quot;Asia/Tel_Aviv&quot; ## [319] &quot;Asia/Thimbu&quot; &quot;Asia/Thimphu&quot; ## [321] &quot;Asia/Tokyo&quot; &quot;Asia/Tomsk&quot; ## [323] &quot;Asia/Ujung_Pandang&quot; &quot;Asia/Ulaanbaatar&quot; ## [325] &quot;Asia/Ulan_Bator&quot; &quot;Asia/Urumqi&quot; ## [327] &quot;Asia/Ust-Nera&quot; &quot;Asia/Vientiane&quot; ## [329] &quot;Asia/Vladivostok&quot; &quot;Asia/Yakutsk&quot; ## [331] &quot;Asia/Yangon&quot; &quot;Asia/Yekaterinburg&quot; ## [333] &quot;Asia/Yerevan&quot; &quot;Atlantic/Azores&quot; ## [335] &quot;Atlantic/Bermuda&quot; &quot;Atlantic/Canary&quot; ## [337] &quot;Atlantic/Cape_Verde&quot; &quot;Atlantic/Faeroe&quot; ## [339] &quot;Atlantic/Faroe&quot; &quot;Atlantic/Jan_Mayen&quot; ## [341] &quot;Atlantic/Madeira&quot; &quot;Atlantic/Reykjavik&quot; ## [343] &quot;Atlantic/South_Georgia&quot; &quot;Atlantic/St_Helena&quot; ## [345] &quot;Atlantic/Stanley&quot; &quot;Australia/ACT&quot; ## [347] &quot;Australia/Adelaide&quot; &quot;Australia/Brisbane&quot; ## [349] &quot;Australia/Broken_Hill&quot; &quot;Australia/Canberra&quot; ## [351] &quot;Australia/Currie&quot; &quot;Australia/Darwin&quot; ## [353] &quot;Australia/Eucla&quot; &quot;Australia/Hobart&quot; ## [355] &quot;Australia/LHI&quot; &quot;Australia/Lindeman&quot; ## [357] &quot;Australia/Lord_Howe&quot; &quot;Australia/Melbourne&quot; ## [359] &quot;Australia/North&quot; &quot;Australia/NSW&quot; ## [361] &quot;Australia/Perth&quot; &quot;Australia/Queensland&quot; ## [363] &quot;Australia/South&quot; &quot;Australia/Sydney&quot; ## [365] &quot;Australia/Tasmania&quot; &quot;Australia/Victoria&quot; ## [367] &quot;Australia/West&quot; &quot;Australia/Yancowinna&quot; ## [369] &quot;Brazil/Acre&quot; &quot;Brazil/DeNoronha&quot; ## [371] &quot;Brazil/East&quot; &quot;Brazil/West&quot; ## [373] &quot;Canada/Atlantic&quot; &quot;Canada/Central&quot; ## [375] &quot;Canada/Eastern&quot; &quot;Canada/Mountain&quot; ## [377] &quot;Canada/Newfoundland&quot; &quot;Canada/Pacific&quot; ## [379] &quot;Canada/Saskatchewan&quot; &quot;Canada/Yukon&quot; ## [381] &quot;CET&quot; &quot;Chile/Continental&quot; ## [383] &quot;Chile/EasterIsland&quot; &quot;CST6CDT&quot; ## [385] &quot;Cuba&quot; &quot;EET&quot; ## [387] &quot;Egypt&quot; &quot;Eire&quot; ## [389] &quot;EST&quot; &quot;EST5EDT&quot; ## [391] &quot;Etc/GMT&quot; &quot;Etc/GMT-0&quot; ## [393] &quot;Etc/GMT-1&quot; &quot;Etc/GMT-10&quot; ## [395] &quot;Etc/GMT-11&quot; &quot;Etc/GMT-12&quot; ## [397] &quot;Etc/GMT-13&quot; &quot;Etc/GMT-14&quot; ## [399] &quot;Etc/GMT-2&quot; &quot;Etc/GMT-3&quot; ## [401] &quot;Etc/GMT-4&quot; &quot;Etc/GMT-5&quot; ## [403] &quot;Etc/GMT-6&quot; &quot;Etc/GMT-7&quot; ## [405] &quot;Etc/GMT-8&quot; &quot;Etc/GMT-9&quot; ## [407] &quot;Etc/GMT+0&quot; &quot;Etc/GMT+1&quot; ## [409] &quot;Etc/GMT+10&quot; &quot;Etc/GMT+11&quot; ## [411] &quot;Etc/GMT+12&quot; &quot;Etc/GMT+2&quot; ## [413] &quot;Etc/GMT+3&quot; &quot;Etc/GMT+4&quot; ## [415] &quot;Etc/GMT+5&quot; &quot;Etc/GMT+6&quot; ## [417] &quot;Etc/GMT+7&quot; &quot;Etc/GMT+8&quot; ## [419] &quot;Etc/GMT+9&quot; &quot;Etc/GMT0&quot; ## [421] &quot;Etc/Greenwich&quot; &quot;Etc/UCT&quot; ## [423] &quot;Etc/Universal&quot; &quot;Etc/UTC&quot; ## [425] &quot;Etc/Zulu&quot; &quot;Europe/Amsterdam&quot; ## [427] &quot;Europe/Andorra&quot; &quot;Europe/Astrakhan&quot; ## [429] &quot;Europe/Athens&quot; &quot;Europe/Belfast&quot; ## [431] &quot;Europe/Belgrade&quot; &quot;Europe/Berlin&quot; ## [433] &quot;Europe/Bratislava&quot; &quot;Europe/Brussels&quot; ## [435] &quot;Europe/Bucharest&quot; &quot;Europe/Budapest&quot; ## [437] &quot;Europe/Busingen&quot; &quot;Europe/Chisinau&quot; ## [439] &quot;Europe/Copenhagen&quot; &quot;Europe/Dublin&quot; ## [441] &quot;Europe/Gibraltar&quot; &quot;Europe/Guernsey&quot; ## [443] &quot;Europe/Helsinki&quot; &quot;Europe/Isle_of_Man&quot; ## [445] &quot;Europe/Istanbul&quot; &quot;Europe/Jersey&quot; ## [447] &quot;Europe/Kaliningrad&quot; &quot;Europe/Kiev&quot; ## [449] &quot;Europe/Kirov&quot; &quot;Europe/Lisbon&quot; ## [451] &quot;Europe/Ljubljana&quot; &quot;Europe/London&quot; ## [453] &quot;Europe/Luxembourg&quot; &quot;Europe/Madrid&quot; ## [455] &quot;Europe/Malta&quot; &quot;Europe/Mariehamn&quot; ## [457] &quot;Europe/Minsk&quot; &quot;Europe/Monaco&quot; ## [459] &quot;Europe/Moscow&quot; &quot;Europe/Nicosia&quot; ## [461] &quot;Europe/Oslo&quot; &quot;Europe/Paris&quot; ## [463] &quot;Europe/Podgorica&quot; &quot;Europe/Prague&quot; ## [465] &quot;Europe/Riga&quot; &quot;Europe/Rome&quot; ## [467] &quot;Europe/Samara&quot; &quot;Europe/San_Marino&quot; ## [469] &quot;Europe/Sarajevo&quot; &quot;Europe/Saratov&quot; ## [471] &quot;Europe/Simferopol&quot; &quot;Europe/Skopje&quot; ## [473] &quot;Europe/Sofia&quot; &quot;Europe/Stockholm&quot; ## [475] &quot;Europe/Tallinn&quot; &quot;Europe/Tirane&quot; ## [477] &quot;Europe/Tiraspol&quot; &quot;Europe/Ulyanovsk&quot; ## [479] &quot;Europe/Uzhgorod&quot; &quot;Europe/Vaduz&quot; ## [481] &quot;Europe/Vatican&quot; &quot;Europe/Vienna&quot; ## [483] &quot;Europe/Vilnius&quot; &quot;Europe/Volgograd&quot; ## [485] &quot;Europe/Warsaw&quot; &quot;Europe/Zagreb&quot; ## [487] &quot;Europe/Zaporozhye&quot; &quot;Europe/Zurich&quot; ## [489] &quot;Factory&quot; &quot;GB&quot; ## [491] &quot;GB-Eire&quot; &quot;GMT&quot; ## [493] &quot;GMT-0&quot; &quot;GMT+0&quot; ## [495] &quot;GMT0&quot; &quot;Greenwich&quot; ## [497] &quot;Hongkong&quot; &quot;HST&quot; ## [499] &quot;Iceland&quot; &quot;Indian/Antananarivo&quot; ## [501] &quot;Indian/Chagos&quot; &quot;Indian/Christmas&quot; ## [503] &quot;Indian/Cocos&quot; &quot;Indian/Comoro&quot; ## [505] &quot;Indian/Kerguelen&quot; &quot;Indian/Mahe&quot; ## [507] &quot;Indian/Maldives&quot; &quot;Indian/Mauritius&quot; ## [509] &quot;Indian/Mayotte&quot; &quot;Indian/Reunion&quot; ## [511] &quot;Iran&quot; &quot;Israel&quot; ## [513] &quot;Jamaica&quot; &quot;Japan&quot; ## [515] &quot;Kwajalein&quot; &quot;Libya&quot; ## [517] &quot;MET&quot; &quot;Mexico/BajaNorte&quot; ## [519] &quot;Mexico/BajaSur&quot; &quot;Mexico/General&quot; ## [521] &quot;MST&quot; &quot;MST7MDT&quot; ## [523] &quot;Navajo&quot; &quot;NZ&quot; ## [525] &quot;NZ-CHAT&quot; &quot;Pacific/Apia&quot; ## [527] &quot;Pacific/Auckland&quot; &quot;Pacific/Bougainville&quot; ## [529] &quot;Pacific/Chatham&quot; &quot;Pacific/Chuuk&quot; ## [531] &quot;Pacific/Easter&quot; &quot;Pacific/Efate&quot; ## [533] &quot;Pacific/Enderbury&quot; &quot;Pacific/Fakaofo&quot; ## [535] &quot;Pacific/Fiji&quot; &quot;Pacific/Funafuti&quot; ## [537] &quot;Pacific/Galapagos&quot; &quot;Pacific/Gambier&quot; ## [539] &quot;Pacific/Guadalcanal&quot; &quot;Pacific/Guam&quot; ## [541] &quot;Pacific/Honolulu&quot; &quot;Pacific/Johnston&quot; ## [543] &quot;Pacific/Kanton&quot; &quot;Pacific/Kiritimati&quot; ## [545] &quot;Pacific/Kosrae&quot; &quot;Pacific/Kwajalein&quot; ## [547] &quot;Pacific/Majuro&quot; &quot;Pacific/Marquesas&quot; ## [549] &quot;Pacific/Midway&quot; &quot;Pacific/Nauru&quot; ## [551] &quot;Pacific/Niue&quot; &quot;Pacific/Norfolk&quot; ## [553] &quot;Pacific/Noumea&quot; &quot;Pacific/Pago_Pago&quot; ## [555] &quot;Pacific/Palau&quot; &quot;Pacific/Pitcairn&quot; ## [557] &quot;Pacific/Pohnpei&quot; &quot;Pacific/Ponape&quot; ## [559] &quot;Pacific/Port_Moresby&quot; &quot;Pacific/Rarotonga&quot; ## [561] &quot;Pacific/Saipan&quot; &quot;Pacific/Samoa&quot; ## [563] &quot;Pacific/Tahiti&quot; &quot;Pacific/Tarawa&quot; ## [565] &quot;Pacific/Tongatapu&quot; &quot;Pacific/Truk&quot; ## [567] &quot;Pacific/Wake&quot; &quot;Pacific/Wallis&quot; ## [569] &quot;Pacific/Yap&quot; &quot;Poland&quot; ## [571] &quot;Portugal&quot; &quot;PRC&quot; ## [573] &quot;PST8PDT&quot; &quot;ROC&quot; ## [575] &quot;ROK&quot; &quot;Singapore&quot; ## [577] &quot;Turkey&quot; &quot;UCT&quot; ## [579] &quot;Universal&quot; &quot;US/Alaska&quot; ## [581] &quot;US/Aleutian&quot; &quot;US/Arizona&quot; ## [583] &quot;US/Central&quot; &quot;US/East-Indiana&quot; ## [585] &quot;US/Eastern&quot; &quot;US/Hawaii&quot; ## [587] &quot;US/Indiana-Starke&quot; &quot;US/Michigan&quot; ## [589] &quot;US/Mountain&quot; &quot;US/Pacific&quot; ## [591] &quot;US/Samoa&quot; &quot;UTC&quot; ## [593] &quot;W-SU&quot; &quot;WET&quot; ## [595] &quot;Zulu&quot; ## attr(,&quot;Version&quot;) ## [1] &quot;2022a&quot; 3.5 时区 ymd_hms(now(), tz = &quot;PRC&quot;) #将时间信息的时区设置为中国 ## [1] &quot;2022-06-07 08:02:31 CST&quot; with_tz(now(), tz=&quot;Europe/Berlin&quot;) #查看其他时区对应的时间，例如柏林 ## [1] &quot;2022-06-07 02:02:31 CEST&quot; 3.6 时间计算 now() #现在时间 ## [1] &quot;2022-06-07 08:02:31 CST&quot; end &lt;- paste(today(), &quot;23:59:59&quot;) #今天的最后1秒 class(end) #是字符串，不是时间格式 ## [1] &quot;character&quot; end &lt;- ymd_hms(end) #转化为时间格式 #今天还剩下多少时间 end - now() # 计算两点间的时间长度；有误，时区不同导致 ## Time difference of 23.95768 hours end &lt;- ymd_hms(end, tz=&quot;PRC&quot;) #时区设置为中国 end - now() #计算两点间的时间长度；正确 ## Time difference of 15.95768 hours difftime(end, now()) #另一种方法，计算两点间的时间长度 ## Time difference of 15.95768 hours today()-ymd(19820704) #我出生多少天了 ## Time difference of 14583 days 3.7 时间数据可视化 3.7.1 厦门空气质量数据分析 数据来源：https://quotsoft.net/air/ 已下载并整理出厦门2018-2021四年的空气质量数据（csv格式）。 读取并查看数据： d2021 &lt;- read.csv(&quot;data/xiamen air/xiamen_air_2021.csv&quot;) #读取2021年的数据 names(d2021) #包含PM2.5，PM10，NO2，SO2， O3， CO等污染物，以及日期、小时、AQI等信息 ## [1] &quot;X&quot; &quot;hour&quot; &quot;AQI&quot; &quot;PM2.5&quot; &quot;PM2.5_24h&quot; &quot;PM10&quot; ## [7] &quot;PM10_24h&quot; &quot;SO2&quot; &quot;SO2_24h&quot; &quot;NO2&quot; &quot;NO2_24h&quot; &quot;O3&quot; ## [13] &quot;O3_24h&quot; &quot;O3_8h&quot; &quot;O3_8h_24h&quot; &quot;CO&quot; &quot;CO_24h&quot; &quot;date&quot; 3.7.2 2021年厦门PM2.5逐日变化趋势 d2021 %&gt;% mutate(date = ymd(date)) %&gt;% #将date转化为日期格式（原为字符格式） ggplot(aes(date, PM2.5)) + geom_point()+ #所有点，每个小时1个点 stat_summary(geom=&quot;line&quot;, fun=&quot;mean&quot;, color=&quot;red&quot;) #日均值线 ## Warning: Removed 7 rows containing non-finite values (stat_summary). ## Warning: Removed 7 rows containing missing values (geom_point). 3.7.3 2021年厦门PM2.5逐日变化趋势：调整细节 d2021 %&gt;% mutate(date = ymd(date)) %&gt;% ggplot(aes(date, PM2.5)) + theme_classic()+ geom_point(size=0.3, alpha=0.7, color=&quot;grey&quot;)+ stat_summary(geom=&quot;line&quot;, fun=&quot;mean&quot;, color=&quot;red2&quot;)+ scale_x_date(date_labels = &quot;%m/%d&quot;, breaks = &quot;1 month&quot;)+ #x轴时间格式设置，格式设置更多选择，查看?strptime(见下下页) labs(x = &quot;Date&quot;, y = ~PM[2.5]~&#39;(&#39;*mu*g~m^&#39;-3&#39;*&#39;)&#39;, title = &quot;Xiamen, 2021&quot;) ## Warning: Removed 7 rows containing non-finite values (stat_summary). ## Warning: Removed 7 rows containing missing values (geom_point). 3.8 ?strptime查看日期时间格式 以下摘录部分，替换进.red[scale_x_date(date_labels = \"%x\")]试试以下代码的效果： %b Abbreviated month name in the current locale on this platform. (Also matches full name on input: in some locales there are no abbreviations of names.) .red[月份文字缩写] %B Full month name in the current locale. (Also matches abbreviated name on input.) .red[月份文字全称] %d Day of the month as decimal number (01–31). %D Date format such as %m/%d/%y: the C99 standard says it should be that exact format (but not all OSes comply). .red[MM/DD/YY格式] %F Equivalent to %Y-%m-%d (the ISO 8601 date format). %m Month as decimal number (01–12). .red[月份，两位数表示] %x Date. Locale-specific on output, “%y/%m/%d” on input. 查看?strptime页面信息或上一页节选信息，尝试各种格式 format(today(), format = &quot;%Y-%B-%d&quot;) ## [1] &quot;2022-June-07&quot; format(today(), format = &quot;%Y/%b/%d&quot;) ## [1] &quot;2022/Jun/07&quot; format(today(), format = &quot;%x&quot;) ## [1] &quot;06/07/2022&quot; format(today(), format = &quot;%F&quot;) ## [1] &quot;2022-06-07&quot; format(today(), format = &quot;%m-%d&quot;) ## [1] &quot;06-07&quot; format(today(), format = &quot;%D&quot;) ## [1] &quot;06/07/22&quot; 3.9 合并四年数据用于分析 d2018 &lt;- read.csv(&quot;data/xiamen air/xiamen_air_2018.csv&quot;) d2019 &lt;- read.csv(&quot;data/xiamen air/xiamen_air_2019.csv&quot;) d2020 &lt;- read.csv(&quot;data/xiamen air/xiamen_air_2020.csv&quot;) d2021 &lt;- read.csv(&quot;data/xiamen air/xiamen_air_2021.csv&quot;) d0 &lt;- rbind(d2018, d2019, d2020, d2021) dim(d0) #34330条数据；(4年应该有365.25*24*4 = 35064条，说明缺失几天数据） ## [1] 34330 18 3.9.1 了解合并数据的结构，尤其是数据类型 str(d0) ## &#39;data.frame&#39;: 34330 obs. of 18 variables: ## $ X : int 1 2 3 4 5 6 7 8 9 10 ... ## $ hour : int 0 1 2 3 4 5 6 7 8 9 ... ## $ AQI : int 81 84 87 NA NA NA NA NA NA NA ... ## $ PM2.5 : int 53 54 59 NA NA NA NA NA NA NA ... ## $ PM2.5_24h: int 45 46 47 NA NA NA NA NA NA NA ... ## $ PM10 : int 111 117 123 NA NA NA NA NA NA NA ... ## $ PM10_24h : int 83 85 88 NA NA NA NA NA NA NA ... ## $ SO2 : int 14 14 15 NA NA NA NA NA NA NA ... ## $ SO2_24h : int 12 13 13 NA NA NA NA NA NA NA ... ## $ NO2 : int 21 20 18 NA NA NA NA NA NA NA ... ## $ NO2_24h : int 32 31 31 NA NA NA NA NA NA NA ... ## $ O3 : int 78 83 90 NA NA NA NA NA NA NA ... ## $ O3_24h : int 78 83 90 NA NA NA NA NA NA NA ... ## $ O3_8h : int 67 83 86 NA NA NA NA NA NA NA ... ## $ O3_8h_24h: int 67 83 86 NA NA NA NA NA NA NA ... ## $ CO : num 0.83 0.8 0.77 NA NA NA NA NA NA NA ... ## $ CO_24h : num 0.77 0.77 0.77 NA NA NA NA NA NA NA ... ## $ date : int 20180101 20180101 20180101 20180101 20180101 20180101 20180101 20180101 20180101 20180101 ... 3.10 数据整理 目前存在问题：（1）date还不是日期格式；（2）没有完整的日期时间列 d &lt;- d0 %&gt;% mutate(time_ymdh = ymd_h(paste(date, hour))) #用ymd_h生成“年月日时”列 sample(d$time_ymdh, 10) #随机选10个查看，确认已是时间格式 ## [1] &quot;2020-04-20 03:00:00 UTC&quot; &quot;2019-10-13 13:00:00 UTC&quot; ## [3] &quot;2018-03-30 20:00:00 UTC&quot; &quot;2018-01-22 02:00:00 UTC&quot; ## [5] &quot;2019-06-04 03:00:00 UTC&quot; &quot;2020-02-13 16:00:00 UTC&quot; ## [7] &quot;2019-09-16 06:00:00 UTC&quot; &quot;2021-12-06 17:00:00 UTC&quot; ## [9] &quot;2018-03-17 02:00:00 UTC&quot; &quot;2019-05-10 02:00:00 UTC&quot; class(d$time_ymdh) #查看格式，确认是时间格式 ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; POSIXct = Portable Operating System Interface for Unix calendar time Portable Operating System Interface for Unix calendar time 3.11 缺哪天的数据？ 用数据可视化的方式，快速找出缺失数据的位置 d %&gt;% mutate(year = year(time_ymdh), #生成年列 month = month(time_ymdh), #生成月份列 day = day(time_ymdh)) %&gt;% #生成日列 ggplot(aes(x = day, y = month, z = PM2.5))+ geom_raster(alpha = 0.5,fill = &quot;blue&quot;)+ #作栅格图，找到缺失格 facet_wrap(~year)+ scale_x_continuous(breaks = 1:31)+ scale_y_continuous(breaks = 1:12)+ theme(panel.grid.minor = element_blank()) 缺2018年12月22-26日和2019年8月24日数据。 可从其他渠道获取数据，将缺失数据补齐。我们暂且忽略缺失数据，继续分析。 3.12 总体趋势：厦门AQI的4年趋势 d %&gt;% ggplot(aes(time_ymdh, AQI))+ #time_ymdh是日期时间格式，可作为x变量 geom_line()+ geom_smooth(se=F) #去除置信区间阴影 ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; ## Warning: Removed 165 rows containing non-finite values (stat_smooth). 总体稳定在50上下，能看到明显的季节波动，空气质量优的天数在增加，污染的天数明显减少。 注：AQI = 0-50是优，51-100是良，101-150是轻度污染，151-200是中度污染，201-300是重度污染，300+是严重污染 3.13 总体趋势：一并查看6项指标 d %&gt;% select(time_ymdh, PM2.5, PM10, SO2, NO2, O3, CO) %&gt;% #选出6项指标 pivot_longer(cols=2:7, names_to = &quot;parameter&quot;, values_to = &quot;value&quot;) %&gt;% #将宽表格转为长表格，要转的数据在2-7列 ggplot(aes(time_ymdh, value))+ geom_line()+ facet_wrap(~parameter, scales=&quot;free_y&quot;)+ geom_smooth(se=F) ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; ## Warning: Removed 1055 rows containing non-finite values (stat_smooth). （1）CO、NO2、PM10、PM2.5、SO2浓度总体下降，极端值频率降低；（2）O3总体稳定；（3）季节波动明显 3.14 细看季节趋势：PM2.5 将4年数据分开看，计算每日PM2.5均值，查看PM2.5均值在一年中的逐日变化趋势。 d %&gt;% mutate(year = year(time_ymdh), #新增列：年份 time_d = yday(time_ymdh)) %&gt;% #新增列：一年中的第几天 group_by(year, time_d) %&gt;% #按某年的某日分组 summarise(mean = mean(PM2.5, na.rm = T)) %&gt;% #计算PM2.5均值，注意去除缺失值 ggplot(aes(time_d, mean, color=factor(year)))+ geom_line()+ facet_wrap(~year)+ geom_smooth(se=F)+ guides(color=&quot;none&quot;) #去除多余的颜色图例 ## `summarise()` has grouped output by &#39;year&#39;. You can override using the ## `.groups` argument. ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 可以看到：PM2.5在冬春季节较高，夏秋季节较低，第200天左右（即7月份）达到最低值。 尝试一下：把PM2.5换成其他参数 3.15 细看各个月份：各月份的PM2.5概率密度分布 d %&gt;% mutate(month=month(time_ymdh)) %&gt;% ggplot(aes(x=PM2.5))+ theme_bw()+ geom_density(aes(color=factor(month))) #概率密度图，颜色映射到月份 ## Warning: Removed 166 rows containing non-finite values (stat_density). 各月份有明显区别，但混在一起，较难分辨 3.16 对比各月份与总体的PM2.5概率密度分布 label_month &lt;- month.name # month.name是12个月份的名称，敲一下看看 names(label_month) &lt;- as.character(1:12) #用于将1-12月修改为January-December d %&gt;% mutate(month=month(time_ymdh)) %&gt;% ggplot(aes(x=PM2.5))+ theme_bw()+ facet_wrap(~month,labeller = labeller(month = label_month))+ geom_density(data=d, fill=&quot;grey80&quot;, alpha=0.3)+ #所有月份的数据（d中不含month列，不会被分面） geom_density(fill=&quot;red&quot;, color=&quot;red&quot;, alpha=0.2)+ #单独各个月份的数据（含month列，会被分面） labs(x=~PM[2.5]~&#39;(&#39;*mu*g~m^&#39;-3&#39;*&#39;)&#39;, y=&quot;Probability density&quot;) ## Warning: Removed 1992 rows containing non-finite values (stat_density). ## Warning: Removed 166 rows containing non-finite values (stat_density). 3.17 对比各月份与总体的PM2.5概率密度分布 PM2.5浓度概率密度分布：黑色是总体的分布，红色是各个月份的分布 往右拖尾表示污染升高，可以看到6-8月PM2.5明显低于总体均值 3.18 季节趋势：总览全部参数 d %&gt;% select(time_ymdh, PM2.5, PM10, SO2, NO2, O3, CO) %&gt;% mutate(year = year(time_ymdh), time_d = yday(time_ymdh)) %&gt;% pivot_longer(cols=2:7, names_to = &quot;parameter&quot;, values_to = &quot;value&quot;) %&gt;% ggplot(aes(time_d, value, color=factor(year)))+ geom_line(alpha=0.4)+ facet_grid(parameter~year, scales=&quot;free&quot;)+ geom_smooth(se=F)+ guides(color=&quot;none&quot;) ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; ## Warning: Removed 1055 rows containing non-finite values (stat_smooth). 3.19 工作日-周末趋势：PM2.5 d %&gt;% mutate(weekday = wday(time_ymdh, week_start = 1), month=month(time_ymdh)) %&gt;% group_by(weekday) %&gt;% summarise(mean = mean(PM2.5, na.rm=T), sd=sd(PM2.5, na.rm=T)) %&gt;% ggplot(aes(weekday, mean))+ geom_ribbon(aes(ymin=mean-sd, ymax=mean+sd), fill=&quot;grey70&quot;)+ #条带上下限分别是mean+-sd geom_line()+ geom_point()+ scale_x_continuous(breaks=1:7) 周末和工作日PM2.5没有明显区别，周五PM2.5可能略低 3.20 昼夜趋势：臭氧 d %&gt;% select(time_ymdh, PM2.5, PM10, SO2, NO2, O3, CO) %&gt;% mutate(year = year(time_ymdh), time_d = yday(time_ymdh), time_h = hour(time_ymdh)) %&gt;% ggplot(aes(time_h, O3, group=time_d))+ #用group将每天的数据分组，每天单独画一条线 geom_line(alpha=0.1, color=&quot;red2&quot;)+ facet_wrap(~year) ## Warning: Removed 13 row(s) containing missing values (geom_path). 3.21 昼夜趋势：臭氧 臭氧浓度有明显的昼夜变化趋势，上午10点后上升，15点左右达到最高值。 #计算整体的各小时均值（不区分月份） d_all &lt;- d %&gt;% mutate(time_h = hour(time_ymdh)) %&gt;% group_by(time_h) %&gt;% summarise(mean= mean(O3, na.rm=T)) d %&gt;% mutate(year = year(time_ymdh), time_h = hour(time_ymdh), time_mt = month(time_ymdh)) %&gt;% group_by(time_mt, time_h) %&gt;% #按月份计算各小时均值 summarise(mean= mean(O3, na.rm=T)) %&gt;% ggplot(aes(time_h, mean))+ geom_line(color=&quot;red2&quot;)+ #红线表示各月份的小时均值 geom_line(data=d_all, aes(time_h, mean), inherit.aes=F, color=&quot;grey50&quot;)+ #灰线表示总体均值 facet_wrap(~time_mt) ## `summarise()` has grouped output by &#39;time_mt&#39;. You can override using the ## `.groups` argument. 3.22 昼夜趋势：臭氧 红线：各月份均值；灰线：总体均值 各月份之间存在区别：例如1月份O3浓度低，峰值出现时间晚；6-7月份O3浓度低，峰值出现时间早；9-10月份O3浓度高，峰值出现时间与总体均值类似。 ## 要点小结 操作 |函数 ——————–|——————— 将字符转化为时间 |ymd()系列 |ymd_hms()系列 提取时间信息 |year()-年；month()-月；day()-日 |hour()-时；minute()-分；second()-秒 |第几天：yday()-年；mday()-月；wday()-星期 坐标轴时间格式设置 |scale_x_date() |scale_x_datetime() 3.23 拓展阅读 https://lubridate.tidyverse.org/ https://r4ds.had.co.nz/dates-and-times.html "],["05-map.html", "Chapter 4 绘制地图", " Chapter 4 绘制地图 We have finished a nice book. "],["06-correlation.html", "Chapter 5 相关性分析", " Chapter 5 相关性分析 Here is a review of existing methods. "],["07-mlr.html", "Chapter 6 线性回归", " Chapter 6 线性回归 Here is a review of existing methods. "],["08-logistic.html", "Chapter 7 Logistic回归", " Chapter 7 Logistic回归 Here is a review of existing methods. "],["09-ttest.html", "Chapter 8 t检验", " Chapter 8 t检验 Here is a review of existing methods. "],["10-anova.html", "Chapter 9 单因素方差分析", " Chapter 9 单因素方差分析 Here is a review of existing methods. "],["11-2wayanova.html", "Chapter 10 多因素方差分析", " Chapter 10 多因素方差分析 Here is a review of existing methods. "],["12-ancova.html", "Chapter 11 协方差分析", " Chapter 11 协方差分析 Here is a review of existing methods. "],["13-pca.html", "Chapter 12 主成分分析", " Chapter 12 主成分分析 Here is a review of existing methods. "],["14-reference.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
